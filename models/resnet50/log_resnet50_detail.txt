XCCL /work/xpu/virtualenvs/paddle_py310_yiqun/lib/python3.10/site-packages/paddle/fluid/../libs/libbkcl.so loaded
[16:33:11][INFO][BKCL][globals.cpp:95] set BKCL timeout to 600 seconds
[16:33:11][INFO][BKCL][globals.cpp:96] set BKCL RING BUFFER SIZE to 1048576
XPURT /work/xpu/virtualenvs/paddle_py310_yiqun/lib/python3.10/site-packages/paddle/fluid/../libs/libxpurt.so.1 loaded
Hint: Your machine support AVX, but the installed paddlepaddle doesn't have avx core. Hence, no-avx core with worse performance will be imported.
If you like, you could reinstall paddlepaddle by 'python -m pip install --force-reinstall paddlepaddle-gpu[==version]' to get better performance.
A new field (seed) detected!
[2024/06/03 16:33:13] ppcls INFO: 
===========================================================
==        PaddleClas is powered by PaddlePaddle !        ==
===========================================================
==                                                       ==
==   For more info please go to the following website.   ==
==                                                       ==
==       https://github.com/PaddlePaddle/PaddleClas      ==
===========================================================

[2024/06/03 16:33:13] ppcls INFO: Arch : 
[2024/06/03 16:33:13] ppcls INFO:     class_num : 1000
[2024/06/03 16:33:13] ppcls INFO:     name : ResNet50
[2024/06/03 16:33:13] ppcls INFO: DataLoader : 
[2024/06/03 16:33:13] ppcls INFO:     Eval : 
[2024/06/03 16:33:13] ppcls INFO:         dataset : 
[2024/06/03 16:33:13] ppcls INFO:             cls_label_path : /work/xpu/paddle_kp_tests/models/resnet50/dataset/ILSVRC2012/val_list_320images.txt
[2024/06/03 16:33:13] ppcls INFO:             image_root : /work/xpu/paddle_kp_tests/models/resnet50/dataset/ILSVRC2012
[2024/06/03 16:33:13] ppcls INFO:             name : ImageNetDataset
[2024/06/03 16:33:13] ppcls INFO:             transform_ops : 
[2024/06/03 16:33:13] ppcls INFO:                 DecodeImage : 
[2024/06/03 16:33:13] ppcls INFO:                     channel_first : False
[2024/06/03 16:33:13] ppcls INFO:                     to_rgb : True
[2024/06/03 16:33:13] ppcls INFO:                 ResizeImage : 
[2024/06/03 16:33:13] ppcls INFO:                     resize_short : 256
[2024/06/03 16:33:13] ppcls INFO:                 CropImage : 
[2024/06/03 16:33:13] ppcls INFO:                     size : 224
[2024/06/03 16:33:13] ppcls INFO:                 NormalizeImage : 
[2024/06/03 16:33:13] ppcls INFO:                     mean : [0.485, 0.456, 0.406]
[2024/06/03 16:33:13] ppcls INFO:                     order : 
[2024/06/03 16:33:13] ppcls INFO:                     scale : 1.0/255.0
[2024/06/03 16:33:13] ppcls INFO:                     std : [0.229, 0.224, 0.225]
[2024/06/03 16:33:13] ppcls INFO:         loader : 
[2024/06/03 16:33:13] ppcls INFO:             num_workers : 4
[2024/06/03 16:33:13] ppcls INFO:             use_shared_memory : True
[2024/06/03 16:33:13] ppcls INFO:         sampler : 
[2024/06/03 16:33:13] ppcls INFO:             batch_size : 64
[2024/06/03 16:33:13] ppcls INFO:             drop_last : False
[2024/06/03 16:33:13] ppcls INFO:             name : DistributedBatchSampler
[2024/06/03 16:33:13] ppcls INFO:             shuffle : False
[2024/06/03 16:33:13] ppcls INFO:     Train : 
[2024/06/03 16:33:13] ppcls INFO:         dataset : 
[2024/06/03 16:33:13] ppcls INFO:             cls_label_path : /work/xpu/paddle_kp_tests/models/resnet50/dataset/ILSVRC2012/train_list_320images.txt
[2024/06/03 16:33:13] ppcls INFO:             image_root : /work/xpu/paddle_kp_tests/models/resnet50/dataset/ILSVRC2012
[2024/06/03 16:33:13] ppcls INFO:             name : ImageNetDataset
[2024/06/03 16:33:13] ppcls INFO:             transform_ops : 
[2024/06/03 16:33:13] ppcls INFO:                 DecodeImage : 
[2024/06/03 16:33:13] ppcls INFO:                     channel_first : False
[2024/06/03 16:33:13] ppcls INFO:                     to_rgb : True
[2024/06/03 16:33:13] ppcls INFO:                 RandCropImage : 
[2024/06/03 16:33:13] ppcls INFO:                     size : 224
[2024/06/03 16:33:13] ppcls INFO:                 RandFlipImage : 
[2024/06/03 16:33:13] ppcls INFO:                     flip_code : 1
[2024/06/03 16:33:13] ppcls INFO:                 NormalizeImage : 
[2024/06/03 16:33:13] ppcls INFO:                     mean : [0.485, 0.456, 0.406]
[2024/06/03 16:33:13] ppcls INFO:                     order : 
[2024/06/03 16:33:13] ppcls INFO:                     scale : 1.0/255.0
[2024/06/03 16:33:13] ppcls INFO:                     std : [0.229, 0.224, 0.225]
[2024/06/03 16:33:13] ppcls INFO:         loader : 
[2024/06/03 16:33:13] ppcls INFO:             num_workers : 8
[2024/06/03 16:33:13] ppcls INFO:             use_shared_memory : True
[2024/06/03 16:33:13] ppcls INFO:         sampler : 
[2024/06/03 16:33:13] ppcls INFO:             batch_size : 32
[2024/06/03 16:33:13] ppcls INFO:             drop_last : False
[2024/06/03 16:33:13] ppcls INFO:             name : DistributedBatchSampler
[2024/06/03 16:33:13] ppcls INFO:             shuffle : True
[2024/06/03 16:33:13] ppcls INFO: Global : 
[2024/06/03 16:33:13] ppcls INFO:     checkpoints : None
[2024/06/03 16:33:13] ppcls INFO:     device : xpu
[2024/06/03 16:33:13] ppcls INFO:     epochs : 1
[2024/06/03 16:33:13] ppcls INFO:     eval_during_train : False
[2024/06/03 16:33:13] ppcls INFO:     eval_interval : 1
[2024/06/03 16:33:13] ppcls INFO:     image_shape : [3, 224, 224]
[2024/06/03 16:33:13] ppcls INFO:     output_dir : ./output/
[2024/06/03 16:33:13] ppcls INFO:     pretrained_model : None
[2024/06/03 16:33:13] ppcls INFO:     print_batch_step : 1
[2024/06/03 16:33:13] ppcls INFO:     save_inference_dir : ./inference
[2024/06/03 16:33:13] ppcls INFO:     save_interval : 10000
[2024/06/03 16:33:13] ppcls INFO:     seed : 1234
[2024/06/03 16:33:13] ppcls INFO:     to_static : False
[2024/06/03 16:33:13] ppcls INFO:     use_visualdl : False
[2024/06/03 16:33:13] ppcls INFO: Infer : 
[2024/06/03 16:33:13] ppcls INFO:     PostProcess : 
[2024/06/03 16:33:13] ppcls INFO:         class_id_map_file : ppcls/utils/imagenet1k_label_list.txt
[2024/06/03 16:33:13] ppcls INFO:         name : Topk
[2024/06/03 16:33:13] ppcls INFO:         topk : 5
[2024/06/03 16:33:13] ppcls INFO:     batch_size : 10
[2024/06/03 16:33:13] ppcls INFO:     infer_imgs : docs/images/inference_deployment/whl_demo.jpg
[2024/06/03 16:33:13] ppcls INFO:     transforms : 
[2024/06/03 16:33:13] ppcls INFO:         DecodeImage : 
[2024/06/03 16:33:13] ppcls INFO:             channel_first : False
[2024/06/03 16:33:13] ppcls INFO:             to_rgb : True
[2024/06/03 16:33:13] ppcls INFO:         ResizeImage : 
[2024/06/03 16:33:13] ppcls INFO:             resize_short : 256
[2024/06/03 16:33:13] ppcls INFO:         CropImage : 
[2024/06/03 16:33:13] ppcls INFO:             size : 224
[2024/06/03 16:33:13] ppcls INFO:         NormalizeImage : 
[2024/06/03 16:33:13] ppcls INFO:             mean : [0.485, 0.456, 0.406]
[2024/06/03 16:33:13] ppcls INFO:             order : 
[2024/06/03 16:33:13] ppcls INFO:             scale : 1.0/255.0
[2024/06/03 16:33:13] ppcls INFO:             std : [0.229, 0.224, 0.225]
[2024/06/03 16:33:13] ppcls INFO:         ToCHWImage : None
[2024/06/03 16:33:13] ppcls INFO: Loss : 
[2024/06/03 16:33:13] ppcls INFO:     Eval : 
[2024/06/03 16:33:13] ppcls INFO:         CELoss : 
[2024/06/03 16:33:13] ppcls INFO:             weight : 1.0
[2024/06/03 16:33:13] ppcls INFO:     Train : 
[2024/06/03 16:33:13] ppcls INFO:         CELoss : 
[2024/06/03 16:33:13] ppcls INFO:             weight : 1.0
[2024/06/03 16:33:13] ppcls INFO: Metric : 
[2024/06/03 16:33:13] ppcls INFO:     Eval : 
[2024/06/03 16:33:13] ppcls INFO:         TopkAcc : 
[2024/06/03 16:33:13] ppcls INFO:             topk : [1, 5]
[2024/06/03 16:33:13] ppcls INFO:     Train : 
[2024/06/03 16:33:13] ppcls INFO:         TopkAcc : 
[2024/06/03 16:33:13] ppcls INFO:             topk : [1, 5]
[2024/06/03 16:33:13] ppcls INFO: Optimizer : 
[2024/06/03 16:33:13] ppcls INFO:     lr : 
[2024/06/03 16:33:13] ppcls INFO:         decay_epochs : [30, 60, 90]
[2024/06/03 16:33:13] ppcls INFO:         learning_rate : 0.1
[2024/06/03 16:33:13] ppcls INFO:         name : Piecewise
[2024/06/03 16:33:13] ppcls INFO:         values : [0.1, 0.01, 0.001, 0.0001]
[2024/06/03 16:33:13] ppcls INFO:     momentum : 0.9
[2024/06/03 16:33:13] ppcls INFO:     name : Momentum
[2024/06/03 16:33:13] ppcls INFO:     regularizer : 
[2024/06/03 16:33:13] ppcls INFO:         coeff : 0.0001
[2024/06/03 16:33:13] ppcls INFO:         name : L2
[2024/06/03 16:33:13] ppcls INFO: profiler_options : None
[2024/06/03 16:33:13] ppcls INFO: train with paddle 2.5.2 and device Place(xpu:0)
I0603 16:33:13.247699 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.248009 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
W0603 16:33:13.248057 74465 xpu_context.cc:169] Please NOTE: xpu device: 0
autotune_file fc {} not exist
I0603 16:33:13.249006 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.249023 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.249186 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.249193 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.249327 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.249333 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.249451 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.249457 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.250082 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.250097 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.250296 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.250305 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.250411 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.250417 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.250527 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.250533 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.250646 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.250653 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.251137 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.251150 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.251348 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.251355 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.251456 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.251462 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.251575 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.251582 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.251691 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.251698 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.252104 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.252116 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.252311 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.252321 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.252420 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.252426 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.252539 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.252545 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.252650 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.252656 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.253047 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.253058 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.253243 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.253250 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.253355 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.253360 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.253469 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.253476 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.253584 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.253592 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.254076 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.254087 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.254271 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.254277 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.254379 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.254385 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.254494 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.254500 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.254607 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.254613 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.254992 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.255003 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.255182 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.255190 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.255290 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.255297 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.255402 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.255409 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.255515 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.255522 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.255883 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.255894 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.256119 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.256127 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.256232 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.256238 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.256352 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.256359 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.256465 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.256472 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.256953 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.256965 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.257148 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.257154 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.257257 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.257263 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.257371 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.257377 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.257486 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.257493 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.257858 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.257869 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.258054 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.258062 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.258159 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.258165 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.258271 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.258277 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.258385 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.258392 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.258749 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.258759 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.258957 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.258966 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.259065 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.259071 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.259184 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.259191 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.259295 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.259301 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.259742 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.259752 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.259938 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.259945 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.260044 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.260051 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.260157 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.260164 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.260269 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.260277 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.260673 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.260684 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.260890 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.260898 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.260999 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.261005 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.261118 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.261126 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.261232 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.261240 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.261610 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.261620 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.261808 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.261829 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.261929 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.261935 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.262044 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.262050 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.262158 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.262166 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.262531 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.262542 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.262718 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.262725 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.262832 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.262840 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.262948 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.262954 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.263063 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.263069 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.263511 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.263522 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.263707 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.263715 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.263824 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.263832 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.263949 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.263957 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.264063 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.264070 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.264439 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.264449 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.264629 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.264636 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.264735 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.264742 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.264859 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.264866 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.264973 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.264979 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.265388 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.265400 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.265596 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.265605 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.265704 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.265712 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.265830 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.265836 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.265945 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.265951 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.266412 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.266422 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.266606 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.266614 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.266712 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.266718 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.266834 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.266841 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.266947 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.266954 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.267329 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.267340 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.267524 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.267531 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.267628 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.267635 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.267745 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.267750 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.267864 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.267870 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.268232 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.268242 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.268424 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.268431 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.268528 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.268535 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.268642 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.268648 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.268756 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.268762 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.269217 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.269229 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.269414 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.269423 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.269526 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.269533 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.269642 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.269649 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.269755 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.269762 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.270170 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.270182 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.270373 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.270382 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.270483 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.270489 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.270596 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.270603 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.270709 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.270716 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.271091 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.271102 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.271283 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.271292 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.271392 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.271399 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.271507 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.271514 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.271620 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.271626 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.272097 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.272109 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.272291 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.272298 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.272395 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.272401 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.272509 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.272516 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.272621 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.272627 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.272997 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.273010 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.273195 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.273201 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.273299 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.273305 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.273415 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.273422 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.273528 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.273535 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.273928 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.273941 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.274132 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.274139 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.274237 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.274243 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.274354 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.274360 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.274468 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.274474 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.274883 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.274895 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.275084 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.275091 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.275190 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.275197 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.275305 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.275310 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.275417 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.275424 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.275885 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.275897 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.276083 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.276091 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.276191 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.276197 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.276307 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.276314 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.276424 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.276430 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.276793 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.276803 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.276988 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.276996 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.277096 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.277102 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.277209 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.277215 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.277323 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.277329 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.277698 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.277707 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.277894 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.277902 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.278004 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.278012 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.278120 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.278127 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.278241 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.278247 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.278698 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.278709 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.278903 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.278913 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.279014 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.279021 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.279129 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.279135 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.279246 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.279253 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.279649 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.279660 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.279845 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.279855 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.279956 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.279963 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.280073 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.280079 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.280193 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.280200 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.280570 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.280581 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.280756 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.280764 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.280874 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.280880 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.280990 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.280997 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.281103 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.281109 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.281563 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.281574 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.281754 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.281761 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.281869 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.281877 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.281987 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.281993 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.282100 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.282106 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.282469 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.282480 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.282661 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.282670 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.282771 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.282778 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.282907 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.282913 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.283021 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.283028 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.283386 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.283396 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.283582 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.283591 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.283689 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.283695 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.283813 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.283821 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.283937 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.283943 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.284751 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.284767 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.284981 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.284989 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.285095 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.285102 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.285218 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.285225 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.285336 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.285342 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.285737 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.285749 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.285951 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.285959 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.286060 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.286067 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.286178 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.286185 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.286293 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.286300 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.286681 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.286692 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.286887 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.286896 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.286998 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.287005 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.287115 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.287122 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.287230 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.287235 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.287693 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.287704 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.287895 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.287904 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.288007 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.288012 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.288121 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.288128 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.288236 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.288242 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.288609 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.288619 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.288802 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.288817 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.288928 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.288935 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.289045 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.289052 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.289160 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.289165 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.289568 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.289580 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.289765 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.289773 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.289883 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.289891 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.290002 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.290009 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.290119 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.290127 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.290596 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.290607 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.290794 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.290802 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.290920 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.290926 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.291036 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.291043 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.291154 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.291162 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.291539 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.291550 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.291747 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.291756 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.291867 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.291873 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.291980 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.291986 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.292095 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.292101 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.292472 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.292483 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.292671 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.292680 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.292783 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.292788 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.292946 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.292954 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.293068 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.293076 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.293454 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.293465 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.293646 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.293654 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.293754 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.293761 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.293885 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.293893 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.294003 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.294008 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.294502 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.294514 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.294696 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.294704 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.294811 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.294829 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.294945 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.294951 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.295058 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.295064 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.295424 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.295435 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.295614 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.295620 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.295720 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.295727 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.295838 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.295845 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.295954 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.295960 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.296320 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.296330 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.296514 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.296522 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.296618 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.296624 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.296736 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.296741 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.296859 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.296865 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.297315 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.297326 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.297514 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.297523 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.297624 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.297631 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.297742 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.297748 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.297863 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.297869 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.298238 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.298247 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.298434 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.298442 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.298540 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.298547 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.298652 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.298658 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.298810 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.298820 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.299189 74465 api.cc:29578] gaussian API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.299201 74465 api.cc:29585] gaussian kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","float","float","int","DataType"]}
I0603 16:33:13.299381 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.299389 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.299491 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.299497 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.299607 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.299613 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.299721 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.299727 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.300215 74465 api.cc:34891] uniform API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.300228 74465 api.cc:34898] uniform kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","DataType","Scalar","Scalar","int"]}
I0603 16:33:13.332938 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.332952 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
[2024/06/03 16:33:13] ppcls WARNING: The training strategy provided by PaddleClas is based on 4 gpus. But the number of gpu is 1 in current training. Please modify the stategy (learning rate, batch size and so on) if use this config to train.
I0603 16:33:13.669432 74465 dygraph_api.cc:1733] reshape API kernel key: [XPU, NCHW, int64]
I0603 16:33:13.669565 74465 dygraph_api.cc:1740] reshape kernel: {"input":["XPU, NCHW, int64"],"output":["XPU, NCHW, int64","XPU, NCHW, int64"],"attribute":["IntArray"]}
I0603 16:33:13.669595 74465 dygraph_api.cc:1757] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.670681 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.670722 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.671882 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.671917 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.671979 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.671988 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.672578 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.672602 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.673243 74465 api.cc:31935] pool2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.673261 74465 api.cc:31942] pool2d kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["IntArray","vector<int>","vector<int>","bool","bool","string","string","bool","bool","string"]}
I0603 16:33:13.673506 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.673519 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.674001 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.674018 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.674041 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.674050 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.674193 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.674207 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.674345 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.674358 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.674686 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.674700 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.674712 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.674718 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.674865 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.674877 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.675017 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.675029 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.675345 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.675359 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.675372 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.675377 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.675731 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.675743 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.675935 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.675949 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.675971 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.675978 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.676277 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.676295 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:13.676476 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.676489 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.676699 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.676712 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.677088 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.677104 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.677125 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.677141 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.677259 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.677271 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.677393 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.677404 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.677567 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.677578 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.677597 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.677616 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.677731 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.677742 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.677856 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.677870 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.678038 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.678050 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.678071 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.678078 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.678331 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.678344 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:13.678409 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.678421 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.678637 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.678648 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.678853 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.678865 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.678879 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.678892 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.679016 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.679028 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.679131 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.679142 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.679324 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.679335 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.679348 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.679354 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.679463 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.679474 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.679600 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.679610 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.679762 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.679773 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.679795 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.679819 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.680066 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.680078 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:13.680131 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.680142 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.680336 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.680347 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.680789 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.680812 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.680835 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.680843 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.681015 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.681025 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.681166 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.681177 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.681488 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.681501 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.681515 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.681521 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.681610 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.681622 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.681705 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.681716 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.681977 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.681993 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.682006 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.682013 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.682222 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.682235 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.682660 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.682673 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.682687 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.682693 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.682873 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.682885 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:13.682965 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.682976 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.683127 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.683138 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.683665 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.683678 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.683692 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.683698 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.683785 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.683797 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.683987 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.684001 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.684223 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.684237 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.684249 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.684255 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.684350 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.684361 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.684455 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.684466 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.684581 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.684592 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.684605 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.684610 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.684767 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.684779 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:13.684852 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.684864 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.685012 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.685024 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.685230 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.685241 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.685254 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.685261 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.685353 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.685364 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.685437 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.685448 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.685562 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.685575 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.685587 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.685593 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.708335 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.708354 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.708969 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.708984 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.709106 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.709118 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.709131 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.709137 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.709307 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.709318 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:13.709374 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.709384 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.709532 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.709543 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.709769 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.709780 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.709794 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.709800 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.709985 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.709996 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.710094 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.710105 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.710211 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.710223 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.710235 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.710242 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.710325 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.710336 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.710415 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.710426 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.710528 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.710539 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.710552 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.710558 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.710702 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.710714 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:13.710780 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.710791 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.710933 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.710945 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.711382 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.711396 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.711409 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.711416 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.711532 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.711544 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.711656 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.711668 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.711997 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.712011 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.712024 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.712030 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.712117 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.712128 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.712211 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.712222 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.712494 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.712508 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.712522 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.712527 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.712671 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.712683 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.713189 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.713203 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.713217 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.713222 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.713332 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.713344 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:13.713402 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.713413 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.713522 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.713533 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.713985 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.714000 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.714015 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.714020 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.714118 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.714129 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.714213 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.714226 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.714596 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.714610 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.714624 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.714629 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.714716 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.714727 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.714823 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.714835 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.714933 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.714946 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.714958 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.714964 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.715073 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.715085 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:13.715148 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.715160 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.715282 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.715293 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.715447 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.715459 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.715472 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.715477 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.715564 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.715574 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.715647 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.715659 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.715760 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.715772 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.715785 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.715791 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.715891 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.715903 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.715992 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.716003 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.716105 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.716117 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.716130 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.716136 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.716246 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.716257 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:13.716318 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.716329 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.716429 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.716440 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.716580 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.716593 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.716604 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.716610 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.716696 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.716706 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.716792 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.716804 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.716936 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.716948 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.716961 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.716966 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.717062 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.717074 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.717140 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.717151 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.717262 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.717272 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.717285 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.717290 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.717396 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.717406 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:13.717468 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.717478 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.717583 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.717595 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.717736 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.717748 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.717761 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.717767 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.717949 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.717962 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.718029 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.718040 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.718149 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.718160 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.718173 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.718179 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.718266 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.718276 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.718365 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.718376 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.718479 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.718490 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.718503 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.718508 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.718621 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.718632 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:13.718688 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.718698 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.718822 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.718834 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.718988 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.719000 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.719014 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.719019 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.719108 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.719120 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.719193 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.719205 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.719310 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.719321 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.719336 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.719341 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.719424 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.719434 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.719506 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.719517 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.719630 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.719641 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.719655 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.719660 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.719764 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.719774 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:13.719849 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.719861 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.719966 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.719977 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.720503 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.720517 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.720531 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.720537 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.720633 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.720645 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.720754 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.720765 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.721202 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.721217 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.721231 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.721236 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.721326 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.721338 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.721413 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.721426 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.721766 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.721778 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.721792 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.721797 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.721953 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.721967 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.728957 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.728976 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.728991 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.728996 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.729089 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.729100 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:13.729161 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.729172 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.729264 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.729274 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.729894 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.729908 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.729923 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.729928 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.730031 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.730041 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.730111 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.730123 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.730422 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.730435 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.730448 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.730453 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.730544 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.730556 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.730624 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.730635 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.730736 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.730746 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.730760 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.730765 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.730891 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.730904 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:13.730962 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.730973 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.731063 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.731074 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.731217 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.731228 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.731241 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.731247 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.731333 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.731343 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.731413 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.731423 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.731521 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.731532 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.731546 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.731552 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.731642 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.731653 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.731719 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.731730 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.731839 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.731853 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.731865 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.731870 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.731954 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.731966 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:13.732019 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.732029 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.732331 74465 api.cc:31935] pool2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.732347 74465 api.cc:31942] pool2d kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["IntArray","vector<int>","vector<int>","bool","bool","string","string","bool","bool","string"]}
I0603 16:33:13.732545 74465 dygraph_api.cc:267] flatten API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.732561 74465 dygraph_api.cc:274] flatten kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["int","int"]}
I0603 16:33:13.732573 74465 dygraph_api.cc:292] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.732676 74465 api.cc:30593] matmul API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.732687 74465 api.cc:30600] matmul kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["bool","bool"]}
I0603 16:33:13.733304 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.733319 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:13.733577 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), int64]
I0603 16:33:13.733594 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, int64"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.733664 74465 api.cc:31621] not_equal API kernel key: [XPU, NCHW, int64]
I0603 16:33:13.733680 74465 api.cc:31628] not_equal kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, bool"],"attribute":[]}
I0603 16:33:13.733853 74465 api.cc:26250] cast API kernel key: [XPU, NCHW, bool]
I0603 16:33:13.733867 74465 api.cc:26257] cast kernel: {"input":["XPU, NCHW, bool"],"output":["XPU, NCHW, Undefined"],"attribute":["DataType"]}
I0603 16:33:13.733966 74465 api.cc:31270] multiply API kernel key: [XPU, NCHW, int64]
I0603 16:33:13.733980 74465 api.cc:31277] multiply kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, int64"],"attribute":[]}
I0603 16:33:13.734165 74465 api.cc:5746] cross_entropy_with_softmax API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.734179 74465 api.cc:5753] cross_entropy_with_softmax kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","bool","bool","int","int"]}
I0603 16:33:13.734376 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), int64]
I0603 16:33:13.734388 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, int64"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.734431 74465 api.cc:27750] equal API kernel key: [XPU, NCHW, int64]
I0603 16:33:13.734442 74465 api.cc:27757] equal kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, bool"],"attribute":[]}
I0603 16:33:13.734550 74465 api.cc:3463] bitwise_not API kernel key: [XPU, NCHW, bool]
I0603 16:33:13.734566 74465 api.cc:3470] bitwise_not kernel: {"input":["KPS, NCHW, bool"],"output":["KPS, NCHW, bool"],"attribute":[]}
I0603 16:33:13.734678 74465 api.cc:26250] cast API kernel key: [XPU, NCHW, bool]
I0603 16:33:13.734690 74465 api.cc:26257] cast kernel: {"input":["XPU, NCHW, bool"],"output":["XPU, NCHW, Undefined"],"attribute":["DataType"]}
I0603 16:33:13.734766 74465 api.cc:26250] cast API kernel key: [XPU, NCHW, bool]
I0603 16:33:13.734776 74465 api.cc:26257] cast kernel: {"input":["XPU, NCHW, bool"],"output":["XPU, NCHW, Undefined"],"attribute":["DataType"]}
I0603 16:33:13.734905 74465 api.cc:34100] sum API kernel key: [XPU, NCHW, int64]
I0603 16:33:13.734920 74465 api.cc:34107] sum kernel: {"input":["XPU, NCHW, int64"],"output":["XPU, NCHW, Undefined"],"attribute":["IntArray","DataType","bool"]}
I0603 16:33:13.735100 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), int64]
I0603 16:33:13.735112 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, int64"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.735152 74465 api.cc:29726] greater_than API kernel key: [XPU, NCHW, int64]
I0603 16:33:13.735167 74465 api.cc:29733] greater_than kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, bool"],"attribute":[]}
I0603 16:33:13.735607 74465 api.cc:14667] mean_all API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.735626 74465 api.cc:14674] mean_all kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.735734 74465 api.cc:30971] mean API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.735747 74465 api.cc:30978] mean kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["IntArray","bool"]}
I0603 16:33:13.735857 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.735870 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:13.736083 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.736096 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.736421 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.736433 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:13.797703 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.797736 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.797998 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.798012 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.798130 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.798141 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.798240 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.798249 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.798346 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.798355 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.798452 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.798460 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.798553 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.798563 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.798661 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.798671 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.798763 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.798770 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.798871 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.798879 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.798977 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.798986 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.799088 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.799096 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.799190 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.799198 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.799293 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.799301 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.799394 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.799402 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.799499 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.799507 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.799602 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.799610 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.799710 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.799717 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.799813 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.799822 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.799922 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.799932 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.800026 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.800034 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.800125 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.800133 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.800231 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.800240 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.800335 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.800343 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.800433 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.800441 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.800532 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.800540 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.800630 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.800638 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.800730 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.800738 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.800843 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.800853 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.800951 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.800959 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.801052 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.801060 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.801151 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.801159 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.801250 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.801259 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.801354 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.801363 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.801458 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.801466 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.801558 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.801565 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.801654 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.801663 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.801756 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.801764 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.801949 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.801959 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.802050 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.802059 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.802156 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.802165 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.802258 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.802265 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.802356 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.802363 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.802450 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.802459 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.802551 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.802557 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.802644 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.802651 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.802742 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.802750 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.802842 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.802851 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.802937 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.802943 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.803030 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.803036 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.803121 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.803129 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.803215 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.803221 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.803308 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.803315 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.803400 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.803407 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.803491 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.803498 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.803581 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.803589 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.803673 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.803681 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.803764 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.803771 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.803862 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.803870 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.803954 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.803962 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.804044 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.804051 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.804140 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.804148 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.804234 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.804242 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.804330 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.804338 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.804422 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.804430 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.804514 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.804522 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.804605 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.804611 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.804698 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.804705 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.804788 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.804796 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.804885 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.804893 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.804975 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.804982 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.805065 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.805073 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.805153 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.805160 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.805240 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.805248 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.805328 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.805336 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.805420 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.805428 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.805511 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.805519 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.805603 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.805610 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.805696 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.805703 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.805786 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.805794 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.805895 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.805904 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.805994 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.806001 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.806087 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.806094 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.806178 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.806185 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.806267 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.806274 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.806360 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.806368 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.806452 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.806458 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.806541 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.806550 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.806633 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.806640 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.806722 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.806730 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.806818 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.806828 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.806911 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.806918 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.807000 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.807008 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.807090 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.807098 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.807180 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.807188 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.807271 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.807278 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.807363 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.807371 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.807453 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.807461 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.807541 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.807549 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.807631 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.807638 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.807722 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.807729 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.807857 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.807866 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.807952 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.807960 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.808044 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.808053 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.808136 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.808144 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.808228 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.808234 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.808318 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.808326 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.808409 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.808416 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.808498 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.808506 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.808590 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.808598 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.808682 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.808689 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.808777 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.808784 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.808878 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.808887 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.808975 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.808984 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.809065 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.809073 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.809156 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.809165 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.809247 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.809254 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.809340 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.809347 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.809430 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.809438 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.809521 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.809528 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.809612 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.809619 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.809705 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.809711 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.809794 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.809803 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.809893 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.809901 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.809991 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.809999 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.810084 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.810091 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.810176 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.810184 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.810268 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.810276 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.810362 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.810370 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.810456 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.810463 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.810546 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.810554 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.810637 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.810644 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.810726 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.810734 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.810825 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.810837 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.810925 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.810932 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.811017 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.811023 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.811107 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.811115 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.811203 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.811210 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.811292 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.811300 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.811383 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.811391 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.811473 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.811480 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.811561 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.811569 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.811653 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.811661 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.811743 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.811749 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.811837 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.811846 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.811936 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.811944 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.812027 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.812036 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.812119 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.812126 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.812208 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.812215 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.812305 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.812312 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.812397 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.812403 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.812487 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.812494 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.812578 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.812587 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.812669 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.812676 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.812760 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.812767 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.812868 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.812876 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.812959 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.812968 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.813055 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.813061 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.813145 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.813153 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.813239 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.813246 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.813333 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.813341 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.813421 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.813427 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.816207 74465 api.cc:15382] merged_momentum_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.816222 74465 api.cc:15389] merged_momentum kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["float","bool","vector<string>","vector<float>","bool","float"]}
I0603 16:33:13.852712 74465 api.cc:23175] topk API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.852743 74465 api.cc:23182] topk kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, int64"],"attribute":["Scalar","int","bool","bool"]}
I0603 16:33:13.853122 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.853132 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:13.853160 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.853165 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:13.853186 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.853209 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:13.853266 74465 api.cc:23175] topk API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.853271 74465 api.cc:23182] topk kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, int64"],"attribute":["Scalar","int","bool","bool"]}
I0603 16:33:13.853364 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.853370 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:13.853389 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.853392 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:13.853411 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.853417 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
[2024/06/03 16:33:13] ppcls INFO: [Train][Epoch 1/1][Iter: 0/10]lr(PiecewiseDecay): 0.10000000, top1: 0.00000, top5: 0.03125, CELoss: 7.01751, loss: 7.01751, batch_cost: 0.51875s, reader_cost: 0.33416, ips: 61.68670 samples/s, eta: 0:00:05
I0603 16:33:13.854260 74465 dygraph_api.cc:1733] reshape API kernel key: [XPU, NCHW, int64]
I0603 16:33:13.854275 74465 dygraph_api.cc:1740] reshape kernel: {"input":["XPU, NCHW, int64"],"output":["XPU, NCHW, int64","XPU, NCHW, int64"],"attribute":["IntArray"]}
I0603 16:33:13.854282 74465 dygraph_api.cc:1757] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.854399 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.854408 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.854521 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.854528 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.854534 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.854537 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.854750 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.854760 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.854970 74465 api.cc:31935] pool2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.854979 74465 api.cc:31942] pool2d kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["IntArray","vector<int>","vector<int>","bool","bool","string","string","bool","bool","string"]}
I0603 16:33:13.855036 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.855041 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.855120 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.855126 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.855132 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.855134 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.855201 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.855207 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.855257 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.855262 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.855337 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.855343 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.855348 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.855350 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.855417 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.855422 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.855472 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.855479 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.855547 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.855553 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.855558 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.855561 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.855731 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.855736 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.855813 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.855818 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.855824 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.855827 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.855999 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.856007 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:13.856041 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.856046 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.856163 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.856168 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.856259 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.856264 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.856271 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.856272 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.856334 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.856340 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.856389 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.856395 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.856467 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.856475 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.856482 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.856484 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.856550 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.856555 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.856604 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.856609 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.856678 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.856683 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.856688 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.856690 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.856853 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.856858 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:13.856884 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.856889 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.856997 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.857002 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.857086 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.857091 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.857097 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.857100 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.857161 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.857167 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.857218 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.857223 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.857293 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.857299 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.857304 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.857307 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.857367 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.857372 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.857420 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.857425 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.857496 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.857502 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.857507 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.857509 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.857674 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.857679 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:13.857705 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.857712 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.857832 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.857841 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.857995 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.858000 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.858006 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.858008 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.858109 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.858114 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.858187 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.858192 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.858306 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.858312 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.858317 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.858320 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.858366 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.858371 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.858467 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.858474 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.858867 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.858875 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.858880 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.858882 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.858987 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.858994 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.859129 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.859134 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.859140 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.859143 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.859233 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.859238 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:13.859266 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.859272 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.859340 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.859346 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.859457 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.859462 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.859467 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.859470 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.859516 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.859521 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.859557 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.859563 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.859611 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.859616 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.859622 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.859624 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.859669 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.859675 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.859710 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.859715 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.859759 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.859764 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.859769 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.859772 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.859887 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.859892 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:13.859920 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.859925 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.859997 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.860002 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.860113 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.860119 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.860124 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.860126 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.860172 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.860177 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.860214 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.860219 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.860266 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.860271 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.860277 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.860280 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.860323 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.860329 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.860364 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.860369 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.860412 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.860417 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.860423 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.860425 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.860520 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.860525 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:13.860549 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.860555 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.860621 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.860626 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.860729 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.860734 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.860740 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.860742 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.860785 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.860790 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.860832 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.860838 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.860881 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.860888 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.860893 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.860895 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.860939 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.860944 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.860980 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.860985 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.861030 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.861035 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.861040 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.861043 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.861132 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.861137 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:13.861161 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.861167 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.861236 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.861241 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.897783 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.897797 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.897809 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.897812 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.897904 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.897912 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.897970 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.897975 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.898054 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.898059 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.898064 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.898066 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.898111 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.898116 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.898144 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.898149 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.898196 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.898201 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.898205 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.898207 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.898281 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.898286 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.898403 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.898408 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.898413 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.898415 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.898475 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.898480 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:13.898506 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.898511 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.898557 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.898562 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.898633 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.898638 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.898643 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.898644 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.898685 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.898689 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.898715 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.898720 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.898759 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.898764 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.898770 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.898772 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.898839 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.898844 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.898869 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.898872 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.898911 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.898914 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.898919 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.898921 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.898973 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.898978 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:13.899001 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.899006 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.899049 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.899055 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.899120 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.899125 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.899130 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.899132 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.899174 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.899179 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.899205 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.899210 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.899251 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.899256 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.899262 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.899263 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.899304 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.899309 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.899335 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.899340 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.899379 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.899384 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.899387 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.899389 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.899446 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.899451 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:13.899474 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.899479 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.899521 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.899526 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.899588 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.899593 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.899598 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.899600 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.899641 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.899645 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.899670 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.899675 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.899715 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.899720 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.899725 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.899727 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.899766 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.899771 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.899794 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.899799 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.899843 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.899848 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.899853 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.899855 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.899907 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.899912 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:13.899938 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.899943 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.900002 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.900007 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.900067 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.900072 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.900077 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.900079 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.900115 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.900120 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.900144 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.900149 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.900188 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.900193 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.900198 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.900200 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.900238 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.900241 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.900265 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.900270 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.900306 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.900311 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.900316 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.900318 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.900367 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.900372 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:13.900391 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.900396 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.900434 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.900439 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.900507 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.900512 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.900517 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.900519 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.900560 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.900564 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.900591 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.900596 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.900637 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.900642 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.900647 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.900650 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.900692 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.900697 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.900722 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.900727 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.900768 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.900774 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.900779 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.900780 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.900837 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.900842 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:13.900867 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.900872 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.900920 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.900925 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.900993 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.900997 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.901002 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.901005 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.901044 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.901049 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.901082 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.901087 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.901129 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.901134 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.901139 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.901140 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.901180 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.901185 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.901211 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.901216 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.901255 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.901259 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.901264 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.901266 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.901310 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.901315 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.901393 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.901398 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.901403 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.901405 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.901443 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.901448 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:13.901469 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.901474 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.901507 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.901511 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.901575 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.901580 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.901584 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.901587 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.901628 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.901633 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.901656 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.901661 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.901700 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.901705 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.901710 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.901711 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.901748 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.901752 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.901777 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.901782 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.901844 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.901849 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.901854 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.901855 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.901891 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.901896 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:13.901916 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.901922 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.901953 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.901958 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.902019 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.902024 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.902029 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.902031 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.902071 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.902076 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.902101 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.902107 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.902156 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.902161 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.902166 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.902168 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.902205 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.902210 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.902235 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.902240 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:13.902276 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.902280 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:13.902285 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.902287 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.902321 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.902326 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:13.902346 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.902351 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.902459 74465 api.cc:31935] pool2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.902467 74465 api.cc:31942] pool2d kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["IntArray","vector<int>","vector<int>","bool","bool","string","string","bool","bool","string"]}
I0603 16:33:13.902513 74465 dygraph_api.cc:267] flatten API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.902520 74465 dygraph_api.cc:274] flatten kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["int","int"]}
I0603 16:33:13.902524 74465 dygraph_api.cc:292] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:13.902546 74465 api.cc:30593] matmul API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.902552 74465 api.cc:30600] matmul kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["bool","bool"]}
I0603 16:33:13.902598 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.902603 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:13.902680 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), int64]
I0603 16:33:13.902688 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, int64"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.902709 74465 api.cc:31621] not_equal API kernel key: [XPU, NCHW, int64]
I0603 16:33:13.902715 74465 api.cc:31628] not_equal kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, bool"],"attribute":[]}
I0603 16:33:13.902752 74465 api.cc:26250] cast API kernel key: [XPU, NCHW, bool]
I0603 16:33:13.902758 74465 api.cc:26257] cast kernel: {"input":["XPU, NCHW, bool"],"output":["XPU, NCHW, Undefined"],"attribute":["DataType"]}
I0603 16:33:13.902782 74465 api.cc:31270] multiply API kernel key: [XPU, NCHW, int64]
I0603 16:33:13.902789 74465 api.cc:31277] multiply kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, int64"],"attribute":[]}
I0603 16:33:13.902843 74465 api.cc:5746] cross_entropy_with_softmax API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.902850 74465 api.cc:5753] cross_entropy_with_softmax kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","bool","bool","int","int"]}
I0603 16:33:13.902897 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), int64]
I0603 16:33:13.902902 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, int64"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.902917 74465 api.cc:27750] equal API kernel key: [XPU, NCHW, int64]
I0603 16:33:13.902923 74465 api.cc:27757] equal kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, bool"],"attribute":[]}
I0603 16:33:13.902948 74465 api.cc:3463] bitwise_not API kernel key: [XPU, NCHW, bool]
I0603 16:33:13.902954 74465 api.cc:3470] bitwise_not kernel: {"input":["KPS, NCHW, bool"],"output":["KPS, NCHW, bool"],"attribute":[]}
I0603 16:33:13.902997 74465 api.cc:26250] cast API kernel key: [XPU, NCHW, bool]
I0603 16:33:13.903000 74465 api.cc:26257] cast kernel: {"input":["XPU, NCHW, bool"],"output":["XPU, NCHW, Undefined"],"attribute":["DataType"]}
I0603 16:33:13.903023 74465 api.cc:26250] cast API kernel key: [XPU, NCHW, bool]
I0603 16:33:13.903028 74465 api.cc:26257] cast kernel: {"input":["XPU, NCHW, bool"],"output":["XPU, NCHW, Undefined"],"attribute":["DataType"]}
I0603 16:33:13.903048 74465 api.cc:34100] sum API kernel key: [XPU, NCHW, int64]
I0603 16:33:13.903053 74465 api.cc:34107] sum kernel: {"input":["XPU, NCHW, int64"],"output":["XPU, NCHW, Undefined"],"attribute":["IntArray","DataType","bool"]}
I0603 16:33:13.903093 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), int64]
I0603 16:33:13.903098 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, int64"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.903113 74465 api.cc:29726] greater_than API kernel key: [XPU, NCHW, int64]
I0603 16:33:13.903120 74465 api.cc:29733] greater_than kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, bool"],"attribute":[]}
I0603 16:33:13.915277 74465 api.cc:14667] mean_all API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.915289 74465 api.cc:14674] mean_all kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:13.915330 74465 api.cc:30971] mean API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.915335 74465 api.cc:30978] mean kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["IntArray","bool"]}
I0603 16:33:13.915378 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.915383 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:13.915640 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:13.915650 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.915886 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.915894 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:13.931994 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.932020 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:13.933110 74465 api.cc:15382] merged_momentum_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:13.933120 74465 api.cc:15389] merged_momentum kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["float","bool","vector<string>","vector<float>","bool","float"]}
I0603 16:33:14.024972 74465 api.cc:23175] topk API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.025002 74465 api.cc:23182] topk kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, int64"],"attribute":["Scalar","int","bool","bool"]}
I0603 16:33:14.025200 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.025208 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:14.025236 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.025243 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.025297 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.025303 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:14.025358 74465 api.cc:23175] topk API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.025364 74465 api.cc:23182] topk kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, int64"],"attribute":["Scalar","int","bool","bool"]}
I0603 16:33:14.025457 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.025463 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:14.025483 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.025487 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.025509 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.025514 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
[2024/06/03 16:33:14] ppcls INFO: [Train][Epoch 1/1][Iter: 1/10]lr(PiecewiseDecay): 0.10000000, top1: 0.00000, top5: 0.01562, CELoss: 9.86815, loss: 9.86815, batch_cost: 0.34520s, reader_cost: 0.16712, ips: 92.70038 samples/s, eta: 0:00:03
I0603 16:33:14.026125 74465 dygraph_api.cc:1733] reshape API kernel key: [XPU, NCHW, int64]
I0603 16:33:14.026140 74465 dygraph_api.cc:1740] reshape kernel: {"input":["XPU, NCHW, int64"],"output":["XPU, NCHW, int64","XPU, NCHW, int64"],"attribute":["IntArray"]}
I0603 16:33:14.026149 74465 dygraph_api.cc:1757] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.026263 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.026271 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.026374 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.026381 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.026387 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.026391 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.026607 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.026615 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.026755 74465 api.cc:31935] pool2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.026762 74465 api.cc:31942] pool2d kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["IntArray","vector<int>","vector<int>","bool","bool","string","string","bool","bool","string"]}
I0603 16:33:14.026821 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.026829 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.026903 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.026911 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.026916 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.026918 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.026988 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.026994 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.027053 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.027060 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.027135 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.027140 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.027146 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.027149 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.027217 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.027225 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.027278 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.027283 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.030264 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.030270 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.030277 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.030280 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.030488 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.030494 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.030568 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.030573 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.030579 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.030582 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.030747 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.030753 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.030788 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.030793 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.030911 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.030917 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.031005 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.031010 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.031016 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.031019 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.031086 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.031092 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.031140 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.031147 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.031216 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.031221 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.031226 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.031229 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.031296 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.031301 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.031348 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.031354 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.031425 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.031430 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.031436 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.031438 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.031610 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.031615 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.031643 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.031648 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.031759 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.031764 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.031874 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.031880 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.031888 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.031890 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.031957 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.031962 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.032014 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.032019 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.032094 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.032099 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.032105 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.032109 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.032177 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.032183 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.032229 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.032234 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.032305 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.032311 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.032317 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.032320 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.032516 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.032521 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.032548 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.032553 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.032660 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.032665 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.032810 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.032815 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.032822 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.032824 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.032927 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.032932 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.033001 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.033006 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.033110 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.033116 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.033123 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.033124 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.033174 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.033179 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.033213 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.033218 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.033267 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.033272 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.033277 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.033280 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.033387 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.033392 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.033535 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.033541 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.033547 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.033550 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.033646 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.033651 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.033680 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.033686 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.033758 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.033763 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.033875 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.033880 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.033886 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.033890 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.033939 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.033944 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.033983 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.033988 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.034039 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.034045 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.034051 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.034054 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.034106 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.034111 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.034149 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.034155 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.034199 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.034204 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.034210 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.034214 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.034312 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.034317 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.034345 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.034351 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.034421 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.034426 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.034546 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.034551 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.034557 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.034560 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.034608 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.034613 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.034649 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.034655 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.034700 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.034705 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.034711 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.034715 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.034762 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.034767 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.034802 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.034812 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.034858 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.034864 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.034870 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.034873 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.034965 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.034969 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.034997 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.035003 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.035069 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.035075 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.035180 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.035185 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.035192 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.035194 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.035241 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.035248 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.035283 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.035288 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.035336 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.035341 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.035347 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.035349 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.035398 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.035403 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.035439 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.035444 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.035490 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.035495 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.035501 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.035504 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.035598 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.035602 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.035629 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.035634 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.035701 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.035707 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.035820 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.035832 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.035840 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.035842 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.035907 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.035912 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.035959 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.035965 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.036034 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.036041 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.036046 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.036048 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.036093 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.036099 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.036130 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.036135 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.036178 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.036185 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.036190 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.036192 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.036258 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.036264 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.036365 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.036370 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.036376 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.036379 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.036438 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.036444 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.036470 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.036475 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.036523 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.036528 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.036599 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.036605 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.036612 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.036613 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.036672 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.036677 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.036708 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.036713 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.036759 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.036764 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.036770 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.036772 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.036887 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.036893 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.036923 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.036929 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.036975 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.036980 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.036986 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.036989 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.037050 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.037056 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.037083 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.037088 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.037133 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.037139 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.037207 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.037214 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.037220 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.037222 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.037269 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.037276 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.037304 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.037310 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.037355 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.037361 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.037367 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.037369 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.037415 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.037421 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.037452 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.037457 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.037508 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.037513 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.037518 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.037520 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.037583 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.037590 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.037618 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.037623 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.037672 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.037678 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.037755 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.037760 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.037765 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.037767 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.037820 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.037827 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.037860 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.037865 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.037914 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.037918 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.037925 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.037926 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.037977 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.037983 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.038015 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.038020 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.038064 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.038070 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.038075 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.038079 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.038141 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.038146 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.038173 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.038179 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.038226 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.038231 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.038304 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.038311 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.038316 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.038318 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.038368 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.038373 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.038403 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.038408 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.038453 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.038460 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.038465 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.038467 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.038515 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.038522 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.038551 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.038556 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.038602 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.038607 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.038614 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.038615 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.038694 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.038699 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.038725 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.038731 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.038781 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.038787 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.038865 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.038870 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.038877 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.038880 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.038929 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.038934 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.038966 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.038971 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.039023 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.039028 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.039034 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.039037 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.039086 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.039093 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.039121 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.039127 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.039173 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.039180 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.039186 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.039187 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.039248 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.039254 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.039283 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.039288 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.039336 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.039341 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.039414 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.039420 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.039425 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.039428 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.039476 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.039481 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.039518 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.039525 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.039572 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.039577 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.039582 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.039584 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.039633 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.039638 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.039669 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.039673 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.039719 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.039724 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.039731 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.039732 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.039781 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.039788 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.039880 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.039885 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.039891 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.039894 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.039933 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.039939 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.039965 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.039971 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.040009 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.040014 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.040081 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.040086 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.040091 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.040093 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.040138 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.040143 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.040170 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.040175 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.040220 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.040226 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.040232 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.040234 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.040277 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.040282 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.040310 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.040316 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.040359 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.040364 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.040370 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.040372 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.040414 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.040421 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.040447 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.040452 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.040488 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.040493 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.040565 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.040570 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.040575 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.040578 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.040634 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.040639 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.040668 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.040673 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.040719 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.040724 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.040730 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.040732 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.040776 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.040781 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.040817 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.040828 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.040879 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.040884 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.040889 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.040892 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.040935 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.040939 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.040967 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.040973 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.041054 74465 api.cc:31935] pool2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.041062 74465 api.cc:31942] pool2d kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["IntArray","vector<int>","vector<int>","bool","bool","string","string","bool","bool","string"]}
I0603 16:33:14.041110 74465 dygraph_api.cc:267] flatten API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.041117 74465 dygraph_api.cc:274] flatten kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["int","int"]}
I0603 16:33:14.041122 74465 dygraph_api.cc:292] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.041146 74465 api.cc:30593] matmul API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.041152 74465 api.cc:30600] matmul kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["bool","bool"]}
I0603 16:33:14.041200 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.041205 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.041273 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), int64]
I0603 16:33:14.041281 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, int64"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:14.041304 74465 api.cc:31621] not_equal API kernel key: [XPU, NCHW, int64]
I0603 16:33:14.041311 74465 api.cc:31628] not_equal kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, bool"],"attribute":[]}
I0603 16:33:14.041347 74465 api.cc:26250] cast API kernel key: [XPU, NCHW, bool]
I0603 16:33:14.041353 74465 api.cc:26257] cast kernel: {"input":["XPU, NCHW, bool"],"output":["XPU, NCHW, Undefined"],"attribute":["DataType"]}
I0603 16:33:14.041378 74465 api.cc:31270] multiply API kernel key: [XPU, NCHW, int64]
I0603 16:33:14.041386 74465 api.cc:31277] multiply kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, int64"],"attribute":[]}
I0603 16:33:14.041435 74465 api.cc:5746] cross_entropy_with_softmax API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.041441 74465 api.cc:5753] cross_entropy_with_softmax kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","bool","bool","int","int"]}
I0603 16:33:14.041492 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), int64]
I0603 16:33:14.041498 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, int64"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:14.041514 74465 api.cc:27750] equal API kernel key: [XPU, NCHW, int64]
I0603 16:33:14.041519 74465 api.cc:27757] equal kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, bool"],"attribute":[]}
I0603 16:33:14.041545 74465 api.cc:3463] bitwise_not API kernel key: [XPU, NCHW, bool]
I0603 16:33:14.041553 74465 api.cc:3470] bitwise_not kernel: {"input":["KPS, NCHW, bool"],"output":["KPS, NCHW, bool"],"attribute":[]}
I0603 16:33:14.041589 74465 api.cc:26250] cast API kernel key: [XPU, NCHW, bool]
I0603 16:33:14.041595 74465 api.cc:26257] cast kernel: {"input":["XPU, NCHW, bool"],"output":["XPU, NCHW, Undefined"],"attribute":["DataType"]}
I0603 16:33:14.041618 74465 api.cc:26250] cast API kernel key: [XPU, NCHW, bool]
I0603 16:33:14.041623 74465 api.cc:26257] cast kernel: {"input":["XPU, NCHW, bool"],"output":["XPU, NCHW, Undefined"],"attribute":["DataType"]}
I0603 16:33:14.041642 74465 api.cc:34100] sum API kernel key: [XPU, NCHW, int64]
I0603 16:33:14.041648 74465 api.cc:34107] sum kernel: {"input":["XPU, NCHW, int64"],"output":["XPU, NCHW, Undefined"],"attribute":["IntArray","DataType","bool"]}
I0603 16:33:14.041690 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), int64]
I0603 16:33:14.041695 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, int64"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:14.041710 74465 api.cc:29726] greater_than API kernel key: [XPU, NCHW, int64]
I0603 16:33:14.041718 74465 api.cc:29733] greater_than kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, bool"],"attribute":[]}
I0603 16:33:14.086699 74465 api.cc:14667] mean_all API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.086714 74465 api.cc:14674] mean_all kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.086760 74465 api.cc:30971] mean API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.086767 74465 api.cc:30978] mean kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["IntArray","bool"]}
I0603 16:33:14.086817 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.086839 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:14.087083 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:14.087093 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:14.087318 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.087325 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:14.101830 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.101850 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:14.103032 74465 api.cc:15382] merged_momentum_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.103041 74465 api.cc:15389] merged_momentum kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["float","bool","vector<string>","vector<float>","bool","float"]}
I0603 16:33:14.200161 74465 api.cc:23175] topk API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.200191 74465 api.cc:23182] topk kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, int64"],"attribute":["Scalar","int","bool","bool"]}
I0603 16:33:14.200403 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.200413 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:14.200444 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.200451 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.200485 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.200491 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:14.200552 74465 api.cc:23175] topk API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.200559 74465 api.cc:23182] topk kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, int64"],"attribute":["Scalar","int","bool","bool"]}
I0603 16:33:14.200671 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.200680 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:14.200702 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.200708 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.200734 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.200740 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
[2024/06/03 16:33:14] ppcls INFO: [Train][Epoch 1/1][Iter: 2/10]lr(PiecewiseDecay): 0.10000000, top1: 0.00000, top5: 0.01042, CELoss: 11.09294, loss: 11.09294, batch_cost: 0.28848s, reader_cost: 0.11144, ips: 110.92469 samples/s, eta: 0:00:02
I0603 16:33:14.201433 74465 dygraph_api.cc:1733] reshape API kernel key: [XPU, NCHW, int64]
I0603 16:33:14.201449 74465 dygraph_api.cc:1740] reshape kernel: {"input":["XPU, NCHW, int64"],"output":["XPU, NCHW, int64","XPU, NCHW, int64"],"attribute":["IntArray"]}
I0603 16:33:14.201462 74465 dygraph_api.cc:1757] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.201591 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.201601 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.201720 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.201728 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.201737 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.201740 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.201989 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.201999 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.202147 74465 api.cc:31935] pool2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.202154 74465 api.cc:31942] pool2d kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["IntArray","vector<int>","vector<int>","bool","bool","string","string","bool","bool","string"]}
I0603 16:33:14.202216 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.202224 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.202316 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.202323 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.202332 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.202334 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.202421 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.202430 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.202490 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.202497 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.202582 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.202589 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.202596 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.202600 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.205195 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.205202 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.205269 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.205276 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.205370 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.205376 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.205384 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.205386 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.205624 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.205631 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.205716 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.205722 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.205730 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.205734 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.205926 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.205935 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.205974 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.205981 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.206102 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.206110 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.206208 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.206215 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.206223 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.206226 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.206302 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.206310 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.206364 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.206372 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.206452 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.206458 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.206466 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.206470 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.206552 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.206559 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.206614 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.206621 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.206703 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.206710 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.206717 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.206722 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.206954 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.206964 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.207003 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.207010 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.207139 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.207146 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.207252 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.207259 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.207266 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.207270 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.207373 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.207379 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.207435 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.207441 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.207525 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.207532 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.207540 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.207542 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.207621 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.207628 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.207682 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.207690 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.207767 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.207773 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.207780 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.207783 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.207970 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.207978 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.208011 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.208017 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.208139 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.208146 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.208299 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.208305 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.208313 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.208317 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.208431 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.208436 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.208510 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.208518 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.208634 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.208642 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.208648 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.208652 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.208711 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.208717 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.208760 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.208766 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.208829 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.208837 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.208843 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.208847 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.208971 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.208977 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.209137 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.209143 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.209151 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.209154 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.209267 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.209275 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.209309 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.209316 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.209398 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.209405 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.209554 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.209561 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.209568 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.209571 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.209631 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.209638 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.209681 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.209687 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.209743 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.209749 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.209756 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.209760 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.209883 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.209890 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.209932 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.209939 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.209993 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.210000 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.210007 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.210012 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.210120 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.210127 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.210160 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.210166 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.210244 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.210250 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.210371 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.210376 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.210384 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.210387 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.210443 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.210449 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.210491 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.210498 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.210551 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.210558 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.210565 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.210569 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.210625 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.210633 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.210673 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.210680 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.210731 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.210737 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.210745 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.210748 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.210860 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.210866 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.210901 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.210907 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.210984 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.210991 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.211112 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.211119 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.211127 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.211130 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.211187 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.211194 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.211236 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.211243 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.211297 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.211303 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.211311 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.211314 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.211369 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.211374 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.211416 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.211423 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.211474 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.211480 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.211488 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.211491 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.211597 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.211603 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.211634 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.211642 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.211745 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.211751 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.211884 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.211891 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.211899 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.211903 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.211977 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.211983 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.212038 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.212044 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.212126 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.212131 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.212139 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.212142 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.212198 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.212204 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.212240 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.212246 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.212299 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.212306 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.212313 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.212316 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.212397 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.212404 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.212523 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.212530 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.212538 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.212541 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.212610 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.212616 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.212651 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.212657 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.212714 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.212720 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.212810 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.212831 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.212839 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.212842 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.212901 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.212908 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.212946 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.212953 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.213009 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.213016 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.213023 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.213027 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.213084 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.213091 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.213129 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.213135 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.213189 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.213196 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.213203 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.213207 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.213279 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.213286 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.213320 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.213325 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.213382 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.213388 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.213471 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.213477 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.213485 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.213488 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.213544 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.213551 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.213587 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.213594 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.213649 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.213655 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.213663 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.213666 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.213729 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.213735 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.213775 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.213781 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.213840 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.213847 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.213855 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.213858 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.213932 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.213938 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.213971 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.213979 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.214032 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.214040 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.214124 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.214131 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.214139 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.214143 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.214201 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.214208 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.214246 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.214252 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.214310 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.214318 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.214325 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.214329 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.214383 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.214390 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.214427 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.214433 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.214490 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.214496 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.214504 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.214507 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.214579 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.214586 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.214618 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.214625 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.214681 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.214687 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.214771 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.214778 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.214787 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.214789 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.214856 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.214864 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.214901 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.214907 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.214964 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.214972 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.214978 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.214982 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.215036 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.215044 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.215080 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.215085 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.215137 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.215143 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.215152 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.215153 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.215221 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.215227 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.215258 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.215263 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.215317 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.215323 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.215405 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.215411 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.215420 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.215422 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.215480 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.215487 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.215524 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.215530 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.215586 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.215592 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.215600 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.215603 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.215662 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.215668 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.215705 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.215711 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.215768 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.215775 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.215782 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.215785 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.215864 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.215871 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.215904 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.215910 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.215967 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.215973 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.216058 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.216064 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.216073 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.216075 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.216131 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.216137 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.216182 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.216188 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.216245 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.216252 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.216259 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.216264 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.216317 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.216323 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.216360 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.216367 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.216423 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.216429 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.216437 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.216440 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.216501 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.216508 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.216606 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.216612 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.216620 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.216624 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.216674 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.216681 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.216715 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.216722 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.216768 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.216773 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.216864 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.216871 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.216878 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.216881 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.216936 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.216943 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.216979 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.216986 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.217041 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.217047 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.217054 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.217057 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.217113 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.217118 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.217154 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.217160 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.217209 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.217216 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.217224 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.217227 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.217274 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.217281 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.217310 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.217317 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.217357 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.217363 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.217443 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.217449 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.217458 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.217460 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.217516 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.217522 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.217559 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.217566 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.217619 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.217626 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.217633 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.217638 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.217691 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.217698 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.217738 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.217744 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.217797 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.217804 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.217834 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.217837 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.217887 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.217895 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.217923 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.217931 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.218027 74465 api.cc:31935] pool2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.218036 74465 api.cc:31942] pool2d kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["IntArray","vector<int>","vector<int>","bool","bool","string","string","bool","bool","string"]}
I0603 16:33:14.218094 74465 dygraph_api.cc:267] flatten API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.218102 74465 dygraph_api.cc:274] flatten kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["int","int"]}
I0603 16:33:14.218108 74465 dygraph_api.cc:292] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.218137 74465 api.cc:30593] matmul API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.218143 74465 api.cc:30600] matmul kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["bool","bool"]}
I0603 16:33:14.218194 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.218200 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.218276 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), int64]
I0603 16:33:14.218284 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, int64"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:14.218308 74465 api.cc:31621] not_equal API kernel key: [XPU, NCHW, int64]
I0603 16:33:14.218317 74465 api.cc:31628] not_equal kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, bool"],"attribute":[]}
I0603 16:33:14.218354 74465 api.cc:26250] cast API kernel key: [XPU, NCHW, bool]
I0603 16:33:14.218362 74465 api.cc:26257] cast kernel: {"input":["XPU, NCHW, bool"],"output":["XPU, NCHW, Undefined"],"attribute":["DataType"]}
I0603 16:33:14.218389 74465 api.cc:31270] multiply API kernel key: [XPU, NCHW, int64]
I0603 16:33:14.218395 74465 api.cc:31277] multiply kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, int64"],"attribute":[]}
I0603 16:33:14.218446 74465 api.cc:5746] cross_entropy_with_softmax API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.218452 74465 api.cc:5753] cross_entropy_with_softmax kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","bool","bool","int","int"]}
I0603 16:33:14.218506 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), int64]
I0603 16:33:14.218513 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, int64"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:14.218529 74465 api.cc:27750] equal API kernel key: [XPU, NCHW, int64]
I0603 16:33:14.218535 74465 api.cc:27757] equal kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, bool"],"attribute":[]}
I0603 16:33:14.218564 74465 api.cc:3463] bitwise_not API kernel key: [XPU, NCHW, bool]
I0603 16:33:14.218571 74465 api.cc:3470] bitwise_not kernel: {"input":["KPS, NCHW, bool"],"output":["KPS, NCHW, bool"],"attribute":[]}
I0603 16:33:14.218611 74465 api.cc:26250] cast API kernel key: [XPU, NCHW, bool]
I0603 16:33:14.218616 74465 api.cc:26257] cast kernel: {"input":["XPU, NCHW, bool"],"output":["XPU, NCHW, Undefined"],"attribute":["DataType"]}
I0603 16:33:14.218642 74465 api.cc:26250] cast API kernel key: [XPU, NCHW, bool]
I0603 16:33:14.218647 74465 api.cc:26257] cast kernel: {"input":["XPU, NCHW, bool"],"output":["XPU, NCHW, Undefined"],"attribute":["DataType"]}
I0603 16:33:14.218669 74465 api.cc:34100] sum API kernel key: [XPU, NCHW, int64]
I0603 16:33:14.218676 74465 api.cc:34107] sum kernel: {"input":["XPU, NCHW, int64"],"output":["XPU, NCHW, Undefined"],"attribute":["IntArray","DataType","bool"]}
I0603 16:33:14.218720 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), int64]
I0603 16:33:14.218726 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, int64"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:14.218742 74465 api.cc:29726] greater_than API kernel key: [XPU, NCHW, int64]
I0603 16:33:14.218748 74465 api.cc:29733] greater_than kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, bool"],"attribute":[]}
I0603 16:33:14.263464 74465 api.cc:14667] mean_all API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.263500 74465 api.cc:14674] mean_all kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.263633 74465 api.cc:30971] mean API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.263650 74465 api.cc:30978] mean kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["IntArray","bool"]}
I0603 16:33:14.263743 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.263756 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:14.264652 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:14.264672 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:14.265089 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.265097 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:14.280875 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.280895 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:14.282203 74465 api.cc:15382] merged_momentum_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.282217 74465 api.cc:15389] merged_momentum kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["float","bool","vector<string>","vector<float>","bool","float"]}
I0603 16:33:14.381726 74465 api.cc:23175] topk API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.381762 74465 api.cc:23182] topk kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, int64"],"attribute":["Scalar","int","bool","bool"]}
I0603 16:33:14.382032 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.382045 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:14.382076 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.382117 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.382155 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.382160 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:14.382228 74465 api.cc:23175] topk API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.382236 74465 api.cc:23182] topk kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, int64"],"attribute":["Scalar","int","bool","bool"]}
I0603 16:33:14.382359 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.382367 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:14.382392 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.382422 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.382452 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.382458 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
[2024/06/03 16:33:14] ppcls INFO: [Train][Epoch 1/1][Iter: 3/10]lr(PiecewiseDecay): 0.10000000, top1: 0.00000, top5: 0.00781, CELoss: 11.11766, loss: 11.11766, batch_cost: 0.26176s, reader_cost: 0.08360, ips: 122.25053 samples/s, eta: 0:00:01
I0603 16:33:14.383459 74465 dygraph_api.cc:1733] reshape API kernel key: [XPU, NCHW, int64]
I0603 16:33:14.383484 74465 dygraph_api.cc:1740] reshape kernel: {"input":["XPU, NCHW, int64"],"output":["XPU, NCHW, int64","XPU, NCHW, int64"],"attribute":["IntArray"]}
I0603 16:33:14.383493 74465 dygraph_api.cc:1757] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.384877 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.384896 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.385043 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.385061 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.385069 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.385073 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.385330 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.385344 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.385522 74465 api.cc:31935] pool2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.385532 74465 api.cc:31942] pool2d kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["IntArray","vector<int>","vector<int>","bool","bool","string","string","bool","bool","string"]}
I0603 16:33:14.385607 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.385617 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.385717 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.385725 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.385735 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.385737 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.385833 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.385841 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.385903 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.385910 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.386003 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.386010 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.386019 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.386022 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.386107 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.386116 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.386174 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.386181 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.386269 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.386276 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.386286 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.386288 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.386499 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.386507 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.386595 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.386601 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.386610 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.386613 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.386855 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.386865 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.386910 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.386917 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.387076 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.387084 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.387197 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.387204 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.387212 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.387216 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.387296 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.387303 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.387359 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.387365 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.387446 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.387452 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.387460 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.387463 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.387539 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.387547 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.387599 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.387606 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.387691 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.387696 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.387703 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.387706 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.387908 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.387916 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.387950 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.387957 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.388082 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.388089 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.388196 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.388203 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.388211 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.388213 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.388295 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.388303 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.388360 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.388365 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.388451 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.388458 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.388465 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.388468 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.388546 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.388553 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.388612 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.388617 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.388698 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.388705 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.388712 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.388716 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.388924 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.388932 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.388968 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.388975 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.389097 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.389103 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.389294 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.389302 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.389309 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.389312 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.389451 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.389458 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.389533 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.389540 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.389664 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.389670 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.389678 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.389681 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.389739 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.389744 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.389786 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.389792 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.389853 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.389860 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.389868 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.389871 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.389995 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.390002 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.390163 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.390169 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.390177 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.390180 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.390291 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.390300 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.390334 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.390341 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.390424 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.390431 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.390558 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.390563 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.390573 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.390576 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.390635 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.390642 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.390684 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.390690 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.390743 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.390750 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.390758 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.390762 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.390826 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.390833 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.390874 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.390882 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.390938 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.390978 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.390986 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.390990 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.391098 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.391104 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.391136 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.391170 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.391245 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.391252 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.391368 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.391374 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.391382 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.391386 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.391445 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.391453 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.391497 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.391501 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.391556 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.391561 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.391568 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.391572 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.391640 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.391646 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.391687 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.391695 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.391749 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.391755 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.391763 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.391767 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.391883 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.391889 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.391923 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.391928 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.392010 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.392016 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.392140 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.392146 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.392153 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.392158 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.392220 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.392225 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.392267 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.392274 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.392330 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.392336 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.392344 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.392347 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.392408 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.392414 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.392457 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.392464 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.392517 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.392524 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.392531 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.392535 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.392663 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.392671 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.392706 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.392712 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.392798 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.392813 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.392936 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.392943 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.392951 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.392954 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.393029 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.393035 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.393087 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.393095 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.393173 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.393180 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.393187 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.393191 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.393245 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.393252 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.393286 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.393292 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.393347 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.393352 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.393360 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.393363 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.393445 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.393451 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.393568 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.393575 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.393582 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.393586 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.393657 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.393666 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.393714 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.393724 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.393795 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.393801 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.393896 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.393903 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.393911 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.393914 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.393972 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.393978 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.394014 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.394021 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.394075 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.394081 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.394089 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.394093 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.394147 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.394155 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.394189 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.394196 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.394248 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.394255 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.394263 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.394266 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.394335 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.394341 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.394374 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.394380 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.394434 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.394441 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.394522 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.394529 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.394537 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.394541 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.394598 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.394603 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.394639 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.394644 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.394699 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.394706 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.394712 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.394716 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.394771 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.394778 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.394820 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.394827 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.394883 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.394889 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.394897 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.394901 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.394970 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.394977 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.395010 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.395015 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.395069 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.395076 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.395159 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.395164 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.395172 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.395175 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.395231 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.395237 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.395274 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.395282 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.395335 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.395341 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.395349 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.395351 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.395408 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.395414 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.395450 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.395457 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.395509 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.395516 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.395524 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.395526 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.395596 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.395603 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.395635 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.395642 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.395695 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.395701 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.395783 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.395789 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.395797 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.395800 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.395867 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.395876 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.395918 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.395924 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.395982 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.395989 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.395996 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.395999 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.396060 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.396067 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.396104 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.396111 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.396167 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.396173 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.396183 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.396184 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.396257 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.396265 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.396299 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.396306 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.396363 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.396369 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.396454 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.396461 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.396468 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.396471 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.396530 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.396538 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.396576 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.396582 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.396637 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.396644 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.396651 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.396654 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.396711 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.396718 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.396756 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.396762 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.396823 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.396831 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.396838 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.396842 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.396912 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.396919 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.396951 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.396956 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.397013 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.397019 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.397106 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.397114 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.397120 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.397125 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.397182 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.397189 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.397230 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.397238 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.397292 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.397300 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.397306 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.397310 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.397367 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.397373 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.397410 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.397416 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.397469 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.397476 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.397483 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.397487 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.397550 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.397557 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.397660 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.397666 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.397675 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.397677 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.397732 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.397737 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.397773 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.397779 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.397855 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.397864 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.397953 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.397960 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.397969 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.397971 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.398029 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.398036 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.398077 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.398083 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.398136 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.398142 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.398149 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.398152 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.398205 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.398211 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.398243 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.398249 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.398298 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.398303 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.398310 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.398313 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.398363 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.398370 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.398399 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.398406 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.398444 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.398450 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.398524 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.398530 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.398538 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.398541 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.398595 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.398602 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.398638 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.398643 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.398692 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.398698 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.398705 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.398708 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.398761 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.398766 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.398800 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.398813 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.398864 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.398870 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.398877 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.398880 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.398926 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.398932 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.398962 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.398967 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.399066 74465 api.cc:31935] pool2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.399075 74465 api.cc:31942] pool2d kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["IntArray","vector<int>","vector<int>","bool","bool","string","string","bool","bool","string"]}
I0603 16:33:14.399138 74465 dygraph_api.cc:267] flatten API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.399150 74465 dygraph_api.cc:274] flatten kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["int","int"]}
I0603 16:33:14.399156 74465 dygraph_api.cc:292] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.399187 74465 api.cc:30593] matmul API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.399197 74465 api.cc:30600] matmul kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["bool","bool"]}
I0603 16:33:14.399248 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.399255 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.399335 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), int64]
I0603 16:33:14.399345 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, int64"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:14.399369 74465 api.cc:31621] not_equal API kernel key: [XPU, NCHW, int64]
I0603 16:33:14.399379 74465 api.cc:31628] not_equal kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, bool"],"attribute":[]}
I0603 16:33:14.399425 74465 api.cc:26250] cast API kernel key: [XPU, NCHW, bool]
I0603 16:33:14.399436 74465 api.cc:26257] cast kernel: {"input":["XPU, NCHW, bool"],"output":["XPU, NCHW, Undefined"],"attribute":["DataType"]}
I0603 16:33:14.399464 74465 api.cc:31270] multiply API kernel key: [XPU, NCHW, int64]
I0603 16:33:14.399478 74465 api.cc:31277] multiply kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, int64"],"attribute":[]}
I0603 16:33:14.399533 74465 api.cc:5746] cross_entropy_with_softmax API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.399544 74465 api.cc:5753] cross_entropy_with_softmax kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","bool","bool","int","int"]}
I0603 16:33:14.399601 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), int64]
I0603 16:33:14.399607 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, int64"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:14.399626 74465 api.cc:27750] equal API kernel key: [XPU, NCHW, int64]
I0603 16:33:14.399637 74465 api.cc:27757] equal kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, bool"],"attribute":[]}
I0603 16:33:14.399675 74465 api.cc:3463] bitwise_not API kernel key: [XPU, NCHW, bool]
I0603 16:33:14.399688 74465 api.cc:3470] bitwise_not kernel: {"input":["KPS, NCHW, bool"],"output":["KPS, NCHW, bool"],"attribute":[]}
I0603 16:33:14.399736 74465 api.cc:26250] cast API kernel key: [XPU, NCHW, bool]
I0603 16:33:14.399742 74465 api.cc:26257] cast kernel: {"input":["XPU, NCHW, bool"],"output":["XPU, NCHW, Undefined"],"attribute":["DataType"]}
I0603 16:33:14.399771 74465 api.cc:26250] cast API kernel key: [XPU, NCHW, bool]
I0603 16:33:14.399776 74465 api.cc:26257] cast kernel: {"input":["XPU, NCHW, bool"],"output":["XPU, NCHW, Undefined"],"attribute":["DataType"]}
I0603 16:33:14.399817 74465 api.cc:34100] sum API kernel key: [XPU, NCHW, int64]
I0603 16:33:14.399828 74465 api.cc:34107] sum kernel: {"input":["XPU, NCHW, int64"],"output":["XPU, NCHW, Undefined"],"attribute":["IntArray","DataType","bool"]}
I0603 16:33:14.399876 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), int64]
I0603 16:33:14.399881 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, int64"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:14.399900 74465 api.cc:29726] greater_than API kernel key: [XPU, NCHW, int64]
I0603 16:33:14.399911 74465 api.cc:29733] greater_than kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, bool"],"attribute":[]}
I0603 16:33:14.445349 74465 api.cc:14667] mean_all API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.445381 74465 api.cc:14674] mean_all kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.445452 74465 api.cc:30971] mean API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.445469 74465 api.cc:30978] mean kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["IntArray","bool"]}
I0603 16:33:14.445526 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.445559 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:14.445895 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:14.445909 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:14.446163 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.446170 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:14.461292 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.461316 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:14.462585 74465 api.cc:15382] merged_momentum_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.462597 74465 api.cc:15389] merged_momentum kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["float","bool","vector<string>","vector<float>","bool","float"]}
I0603 16:33:14.560726 74465 api.cc:23175] topk API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.560762 74465 api.cc:23182] topk kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, int64"],"attribute":["Scalar","int","bool","bool"]}
I0603 16:33:14.561010 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.561023 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:14.561057 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.561066 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.561105 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.561110 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:14.561178 74465 api.cc:23175] topk API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.561187 74465 api.cc:23182] topk kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, int64"],"attribute":["Scalar","int","bool","bool"]}
I0603 16:33:14.561307 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.561317 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:14.561342 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.561373 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.561403 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.561430 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
[2024/06/03 16:33:14] ppcls INFO: [Train][Epoch 1/1][Iter: 4/10]lr(PiecewiseDecay): 0.10000000, top1: 0.00000, top5: 0.01250, CELoss: 10.85823, loss: 10.85823, batch_cost: 0.24512s, reader_cost: 0.06692, ips: 130.54716 samples/s, eta: 0:00:01
I0603 16:33:14.562193 74465 dygraph_api.cc:1733] reshape API kernel key: [XPU, NCHW, int64]
I0603 16:33:14.562211 74465 dygraph_api.cc:1740] reshape kernel: {"input":["XPU, NCHW, int64"],"output":["XPU, NCHW, int64","XPU, NCHW, int64"],"attribute":["IntArray"]}
I0603 16:33:14.562219 74465 dygraph_api.cc:1757] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.562364 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.562376 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.562505 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.562513 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.562523 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.562526 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.562779 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.562789 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.562956 74465 api.cc:31935] pool2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.562966 74465 api.cc:31942] pool2d kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["IntArray","vector<int>","vector<int>","bool","bool","string","string","bool","bool","string"]}
I0603 16:33:14.563035 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.563042 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.563140 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.563153 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.563162 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.563165 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.563256 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.563262 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.563325 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.563334 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.563428 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.563436 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.563444 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.563447 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.566017 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.566027 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.566102 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.566108 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.566210 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.566216 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.566226 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.566228 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.566481 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.566489 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.566578 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.566586 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.566594 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.566598 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.566790 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.566799 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.566849 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.566856 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.566987 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.566993 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.567102 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.567109 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.567117 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.567121 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.567203 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.567210 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.567267 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.567276 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.567364 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.567371 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.567379 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.567384 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.567469 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.567476 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.567540 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.567548 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.567636 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.567642 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.567651 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.567654 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.567883 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.567893 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.567930 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.567938 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.568069 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.568075 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.568199 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.568207 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.568215 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.568218 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.568310 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.568316 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.568377 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.568384 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.568475 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.568482 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.568490 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.568493 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.568578 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.568584 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.568642 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.568650 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.568735 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.568742 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.568750 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.568753 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.568948 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.568955 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.568990 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.568998 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.569130 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.569137 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.569304 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.569311 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.569319 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.569322 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.569447 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.569453 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.569538 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.569545 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.569679 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.569685 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.569693 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.569698 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.569762 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.569769 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.569823 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.569830 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.569888 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.569896 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.569904 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.569908 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.570044 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.570051 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.570225 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.570232 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.570240 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.570243 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.570380 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.570387 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.570426 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.570433 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.570519 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.570526 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.570655 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.570662 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.570670 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.570674 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.570737 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.570744 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.570791 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.570797 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.570871 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.570880 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.570889 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.570894 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.570957 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.570964 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.571012 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.571018 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.571075 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.571082 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.571090 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.571094 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.571208 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.571215 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.571251 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.571259 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.571341 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.571349 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.571477 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.571484 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.571492 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.571496 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.571558 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.571565 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.571612 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.571619 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.571678 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.571686 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.571693 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.571697 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.571759 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.571766 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.571817 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.571825 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.571882 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.571888 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.571897 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.571900 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.572014 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.572021 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.572057 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.572064 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.572145 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.572152 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.572279 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.572286 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.572294 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.572299 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.572360 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.572367 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.572415 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.572422 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.572484 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.572490 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.572499 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.572502 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.572576 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.572583 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.572628 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.572635 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.572691 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.572698 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.572706 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.572710 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.572829 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.572837 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.572873 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.572880 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.572961 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.572968 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.573097 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.573104 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.573112 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.573117 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.573199 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.573205 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.573263 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.573271 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.573354 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.573360 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.573369 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.573371 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.573432 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.573439 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.573477 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.573484 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.573545 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.573552 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.573560 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.573565 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.573658 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.573665 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.573799 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.573812 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.573820 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.573824 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.573904 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.573911 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.573949 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.573956 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.574019 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.574025 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.574118 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.574126 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.574134 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.574138 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.574198 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.574205 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.574244 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.574250 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.574311 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.574317 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.574326 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.574330 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.574394 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.574401 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.574440 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.574448 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.574507 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.574514 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.574522 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.574527 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.574604 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.574611 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.574651 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.574657 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.574728 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.574735 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.574844 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.574852 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.574862 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.574865 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.574929 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.574936 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.574978 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.574985 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.575047 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.575053 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.575062 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.575066 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.575130 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.575137 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.575178 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.575186 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.575244 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.575251 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.575259 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.575263 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.575341 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.575348 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.575385 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.575392 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.575456 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.575462 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.575553 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.575560 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.575568 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.575572 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.575635 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.575642 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.575683 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.575691 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.575752 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.575758 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.575767 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.575770 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.575840 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.575847 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.575888 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.575896 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.575954 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.575961 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.575969 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.575973 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.576047 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.576054 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.576089 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.576097 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.576154 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.576161 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.576249 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.576256 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.576264 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.576268 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.576329 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.576336 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.576377 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.576385 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.576444 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.576452 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.576460 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.576464 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.576524 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.576530 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.576570 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.576576 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.576632 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.576638 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.576646 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.576649 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.576725 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.576732 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.576768 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.576776 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.576855 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.576871 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.576972 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.576979 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.576987 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.576992 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.577055 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.577061 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.577100 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.577105 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.577160 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.577167 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.577175 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.577178 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.577235 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.577241 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.577280 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.577286 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.577343 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.577349 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.577358 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.577360 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.577433 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.577440 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.577473 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.577479 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.577536 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.577543 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.577632 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.577638 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.577646 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.577649 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.577706 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.577713 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.577756 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.577764 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.577836 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.577845 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.577853 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.577857 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.577914 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.577920 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.577957 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.577963 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.578022 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.578028 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.578035 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.578038 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.578102 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.578109 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.578207 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.578213 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.578220 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.578223 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.578276 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.578284 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.578318 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.578325 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.578370 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.578377 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.578454 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.578460 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.578469 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.578471 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.578526 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.578531 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.578565 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.578572 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.578622 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.578629 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.578636 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.578639 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.578692 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.578698 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.578732 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.578737 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.578792 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.578799 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.578811 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.578815 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.578868 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.578876 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.578909 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.578917 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.578960 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.578966 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.579056 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.579063 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.579070 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.579073 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.579130 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.579138 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.579172 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.579180 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.579232 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.579239 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.579246 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.579249 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.579303 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.579309 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.579345 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.579352 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.579401 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.579408 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.579416 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.579419 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.579468 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.579474 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.579504 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.579510 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.579612 74465 api.cc:31935] pool2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.579620 74465 api.cc:31942] pool2d kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["IntArray","vector<int>","vector<int>","bool","bool","string","string","bool","bool","string"]}
I0603 16:33:14.579676 74465 dygraph_api.cc:267] flatten API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.579685 74465 dygraph_api.cc:274] flatten kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["int","int"]}
I0603 16:33:14.579691 74465 dygraph_api.cc:292] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.579720 74465 api.cc:30593] matmul API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.579727 74465 api.cc:30600] matmul kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["bool","bool"]}
I0603 16:33:14.579780 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.579787 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.579878 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), int64]
I0603 16:33:14.579890 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, int64"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:14.579913 74465 api.cc:31621] not_equal API kernel key: [XPU, NCHW, int64]
I0603 16:33:14.579921 74465 api.cc:31628] not_equal kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, bool"],"attribute":[]}
I0603 16:33:14.579958 74465 api.cc:26250] cast API kernel key: [XPU, NCHW, bool]
I0603 16:33:14.579967 74465 api.cc:26257] cast kernel: {"input":["XPU, NCHW, bool"],"output":["XPU, NCHW, Undefined"],"attribute":["DataType"]}
I0603 16:33:14.579994 74465 api.cc:31270] multiply API kernel key: [XPU, NCHW, int64]
I0603 16:33:14.580001 74465 api.cc:31277] multiply kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, int64"],"attribute":[]}
I0603 16:33:14.580054 74465 api.cc:5746] cross_entropy_with_softmax API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.580061 74465 api.cc:5753] cross_entropy_with_softmax kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","bool","bool","int","int"]}
I0603 16:33:14.580118 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), int64]
I0603 16:33:14.580124 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, int64"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:14.580142 74465 api.cc:27750] equal API kernel key: [XPU, NCHW, int64]
I0603 16:33:14.580148 74465 api.cc:27757] equal kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, bool"],"attribute":[]}
I0603 16:33:14.580178 74465 api.cc:3463] bitwise_not API kernel key: [XPU, NCHW, bool]
I0603 16:33:14.580186 74465 api.cc:3470] bitwise_not kernel: {"input":["KPS, NCHW, bool"],"output":["KPS, NCHW, bool"],"attribute":[]}
I0603 16:33:14.580230 74465 api.cc:26250] cast API kernel key: [XPU, NCHW, bool]
I0603 16:33:14.580236 74465 api.cc:26257] cast kernel: {"input":["XPU, NCHW, bool"],"output":["XPU, NCHW, Undefined"],"attribute":["DataType"]}
I0603 16:33:14.580264 74465 api.cc:26250] cast API kernel key: [XPU, NCHW, bool]
I0603 16:33:14.580271 74465 api.cc:26257] cast kernel: {"input":["XPU, NCHW, bool"],"output":["XPU, NCHW, Undefined"],"attribute":["DataType"]}
I0603 16:33:14.580293 74465 api.cc:34100] sum API kernel key: [XPU, NCHW, int64]
I0603 16:33:14.580300 74465 api.cc:34107] sum kernel: {"input":["XPU, NCHW, int64"],"output":["XPU, NCHW, Undefined"],"attribute":["IntArray","DataType","bool"]}
I0603 16:33:14.580348 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), int64]
I0603 16:33:14.580354 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, int64"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:14.580372 74465 api.cc:29726] greater_than API kernel key: [XPU, NCHW, int64]
I0603 16:33:14.580377 74465 api.cc:29733] greater_than kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, bool"],"attribute":[]}
I0603 16:33:14.623325 74465 api.cc:14667] mean_all API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.623344 74465 api.cc:14674] mean_all kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.623401 74465 api.cc:30971] mean API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.623442 74465 api.cc:30978] mean kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["IntArray","bool"]}
I0603 16:33:14.623497 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.623528 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:14.623886 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:14.623898 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:14.624161 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.624168 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:14.639804 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.639915 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:14.641258 74465 api.cc:15382] merged_momentum_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.641268 74465 api.cc:15389] merged_momentum kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["float","bool","vector<string>","vector<float>","bool","float"]}
I0603 16:33:14.751857 74465 api.cc:23175] topk API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.751910 74465 api.cc:23182] topk kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, int64"],"attribute":["Scalar","int","bool","bool"]}
I0603 16:33:14.752220 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.752238 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:14.752281 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.752293 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.752342 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.752351 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:14.752445 74465 api.cc:23175] topk API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.752456 74465 api.cc:23182] topk kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, int64"],"attribute":["Scalar","int","bool","bool"]}
I0603 16:33:14.752620 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.752631 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:14.752663 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.752672 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.752710 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.752718 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
[2024/06/03 16:33:14] ppcls INFO: [Train][Epoch 1/1][Iter: 5/10]lr(PiecewiseDecay): 0.10000000, top1: 0.00000, top5: 0.01042, CELoss: 10.70375, loss: 10.70375, batch_cost: 0.19118s, reader_cost: 0.00011, ips: 167.37715 samples/s, eta: 0:00:00
I0603 16:33:14.753719 74465 dygraph_api.cc:1733] reshape API kernel key: [XPU, NCHW, int64]
I0603 16:33:14.753743 74465 dygraph_api.cc:1740] reshape kernel: {"input":["XPU, NCHW, int64"],"output":["XPU, NCHW, int64","XPU, NCHW, int64"],"attribute":["IntArray"]}
I0603 16:33:14.753754 74465 dygraph_api.cc:1757] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.753954 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.753970 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.754127 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.754139 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.754150 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.754155 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.754444 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.754456 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.754645 74465 api.cc:31935] pool2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.754657 74465 api.cc:31942] pool2d kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["IntArray","vector<int>","vector<int>","bool","bool","string","string","bool","bool","string"]}
I0603 16:33:14.754750 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.754760 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.754979 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.754990 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.755002 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.755005 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.757025 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.757035 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.757122 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.757130 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.757259 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.757268 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.757279 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.757283 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.757396 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.757405 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.757485 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.757494 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.757615 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.757624 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.757634 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.757638 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.757939 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.757949 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.758067 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.758076 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.758087 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.758091 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.758327 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.758338 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.758395 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.758404 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.758567 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.758576 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.758713 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.758721 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.758733 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.758738 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.758852 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.758862 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.758944 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.758952 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.759078 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.759088 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.759097 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.759102 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.759202 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.759210 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.759284 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.759294 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.759402 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.759410 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.759420 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.759424 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.759660 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.759670 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.759719 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.759728 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.759918 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.759928 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.760062 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.760071 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.760082 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.760087 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.760193 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.760202 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.760273 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.760282 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.760388 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.760396 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.760407 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.760411 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.760512 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.760521 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.760591 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.760600 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.760708 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.760717 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.760727 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.760732 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.760970 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.760982 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.761034 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.761041 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.761207 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.761216 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.761417 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.761426 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.761437 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.761443 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.761590 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.761598 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.761698 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.761708 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.761873 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.761883 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.761893 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.761898 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.761974 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.761983 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.762042 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.762050 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.762127 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.762136 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.762146 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.762151 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.762305 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.762315 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.762504 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.762512 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.762523 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.762528 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.762663 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.762671 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.762720 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.762729 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.762853 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.762866 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.763038 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.763047 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.763058 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.763063 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.763140 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.763149 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.763206 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.763216 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.763288 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.763296 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.763307 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.763311 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.763386 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.763396 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.763451 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.763460 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.763530 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.763538 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.763550 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.763556 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.763689 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.763698 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.763743 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.763752 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.763876 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.763887 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.764043 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.764052 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.764062 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.764067 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.764146 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.764155 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.764212 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.764220 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.764292 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.764302 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.764312 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.764317 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.764389 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.764396 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.764448 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.764456 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.764518 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.764524 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.764534 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.764539 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.764659 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.764668 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.764706 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.764714 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.764803 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.764819 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.764961 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.764971 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.764981 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.764986 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.765065 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.765074 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.765127 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.765136 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.765203 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.765211 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.765220 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.765224 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.765298 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.765306 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.765358 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.765367 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.765430 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.765439 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.765447 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.765451 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.765583 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.765591 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.765631 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.765640 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.765729 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.765738 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.765889 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.765898 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.765908 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.765911 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.766006 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.766014 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.766079 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.766088 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.766182 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.766191 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.766201 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.766204 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.766274 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.766283 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.766324 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.766332 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.766399 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.766407 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.766417 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.766422 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.766522 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.766530 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.766673 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.766681 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.766690 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.766695 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.766784 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.766793 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.766849 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.766857 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.766927 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.766937 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.767056 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.767064 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.767074 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.767079 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.767148 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.767156 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.767202 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.767210 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.767283 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.767292 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.767300 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.767304 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.767376 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.767383 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.767431 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.767438 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.767503 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.767510 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.767520 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.767524 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.767606 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.767614 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.767653 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.767660 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.767722 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.767730 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.767834 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.767843 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.767853 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.767856 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.767926 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.767933 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.767979 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.767987 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.768055 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.768064 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.768072 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.768076 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.768144 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.768151 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.768195 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.768203 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.768263 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.768271 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.768281 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.768285 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.768368 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.768375 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.768414 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.768421 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.768486 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.768494 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.768594 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.768601 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.768610 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.768615 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.768687 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.768694 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.768740 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.768747 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.768824 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.768832 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.768841 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.768846 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.768918 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.768926 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.768976 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.768985 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.769047 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.769055 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.769065 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.769069 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.769151 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.769160 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.769201 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.769207 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.769273 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.769281 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.769381 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.769389 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.769398 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.769403 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.769474 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.769482 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.769528 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.769536 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.769606 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.769614 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.769623 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.769627 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.769693 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.769701 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.769747 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.769754 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.769822 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.769832 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.769841 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.769845 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.769927 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.769935 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.769974 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.769982 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.770046 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.770053 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.770151 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.770159 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.770169 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.770174 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.770239 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.770247 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.770292 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.770299 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.770365 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.770373 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.770382 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.770386 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.770454 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.770462 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.770506 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.770514 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.770578 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.770586 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.770596 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.770599 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.770680 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.770689 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.770730 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.770737 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.770821 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.770830 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.770927 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.770936 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.770944 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.770948 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.771018 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.771025 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.771075 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.771083 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.771147 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.771155 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.771164 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.771169 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.771234 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.771240 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.771282 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.771289 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.771355 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.771363 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.771373 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.771376 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.771449 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.771457 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.771572 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.771580 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.771589 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.771595 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.771654 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.771662 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.771703 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.771710 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.771761 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.771770 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.771875 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.771884 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.771893 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.771898 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.771963 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.771971 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.772014 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.772022 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.772087 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.772095 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.772104 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.772110 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.772174 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.772182 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.772224 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.772233 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.772295 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.772303 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.772312 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.772317 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.772377 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.772384 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.772423 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.772430 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.772482 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.772490 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.772603 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.772611 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.772621 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.772625 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.772692 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.772701 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.772745 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.772753 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.772828 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.772837 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.772846 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.772850 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.772918 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.772926 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.772974 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.772982 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.773048 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.773056 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.773065 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.773069 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.773131 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.773139 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.773178 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.773186 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.773325 74465 api.cc:31935] pool2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.773336 74465 api.cc:31942] pool2d kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["IntArray","vector<int>","vector<int>","bool","bool","string","string","bool","bool","string"]}
I0603 16:33:14.773406 74465 dygraph_api.cc:267] flatten API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.773417 74465 dygraph_api.cc:274] flatten kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["int","int"]}
I0603 16:33:14.773424 74465 dygraph_api.cc:292] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.773459 74465 api.cc:30593] matmul API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.773468 74465 api.cc:30600] matmul kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["bool","bool"]}
I0603 16:33:14.773531 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.773540 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.773638 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), int64]
I0603 16:33:14.773648 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, int64"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:14.773679 74465 api.cc:31621] not_equal API kernel key: [XPU, NCHW, int64]
I0603 16:33:14.773689 74465 api.cc:31628] not_equal kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, bool"],"attribute":[]}
I0603 16:33:14.773746 74465 api.cc:26250] cast API kernel key: [XPU, NCHW, bool]
I0603 16:33:14.773756 74465 api.cc:26257] cast kernel: {"input":["XPU, NCHW, bool"],"output":["XPU, NCHW, Undefined"],"attribute":["DataType"]}
I0603 16:33:14.773790 74465 api.cc:31270] multiply API kernel key: [XPU, NCHW, int64]
I0603 16:33:14.773799 74465 api.cc:31277] multiply kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, int64"],"attribute":[]}
I0603 16:33:14.773871 74465 api.cc:5746] cross_entropy_with_softmax API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.773882 74465 api.cc:5753] cross_entropy_with_softmax kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","bool","bool","int","int"]}
I0603 16:33:14.773952 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), int64]
I0603 16:33:14.773960 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, int64"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:14.773983 74465 api.cc:27750] equal API kernel key: [XPU, NCHW, int64]
I0603 16:33:14.773993 74465 api.cc:27757] equal kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, bool"],"attribute":[]}
I0603 16:33:14.774030 74465 api.cc:3463] bitwise_not API kernel key: [XPU, NCHW, bool]
I0603 16:33:14.774040 74465 api.cc:3470] bitwise_not kernel: {"input":["KPS, NCHW, bool"],"output":["KPS, NCHW, bool"],"attribute":[]}
I0603 16:33:14.774094 74465 api.cc:26250] cast API kernel key: [XPU, NCHW, bool]
I0603 16:33:14.774101 74465 api.cc:26257] cast kernel: {"input":["XPU, NCHW, bool"],"output":["XPU, NCHW, Undefined"],"attribute":["DataType"]}
I0603 16:33:14.774137 74465 api.cc:26250] cast API kernel key: [XPU, NCHW, bool]
I0603 16:33:14.774143 74465 api.cc:26257] cast kernel: {"input":["XPU, NCHW, bool"],"output":["XPU, NCHW, Undefined"],"attribute":["DataType"]}
I0603 16:33:14.774171 74465 api.cc:34100] sum API kernel key: [XPU, NCHW, int64]
I0603 16:33:14.774178 74465 api.cc:34107] sum kernel: {"input":["XPU, NCHW, int64"],"output":["XPU, NCHW, Undefined"],"attribute":["IntArray","DataType","bool"]}
I0603 16:33:14.774237 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), int64]
I0603 16:33:14.774245 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, int64"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:14.774267 74465 api.cc:29726] greater_than API kernel key: [XPU, NCHW, int64]
I0603 16:33:14.774276 74465 api.cc:29733] greater_than kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, bool"],"attribute":[]}
I0603 16:33:14.814733 74465 api.cc:14667] mean_all API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.814751 74465 api.cc:14674] mean_all kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.814817 74465 api.cc:30971] mean API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.814834 74465 api.cc:30978] mean kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["IntArray","bool"]}
I0603 16:33:14.814894 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.814903 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:14.815280 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:14.815292 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:14.815582 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.815590 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:14.832690 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.832720 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:14.834242 74465 api.cc:15382] merged_momentum_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.834255 74465 api.cc:15389] merged_momentum kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["float","bool","vector<string>","vector<float>","bool","float"]}
I0603 16:33:14.938067 74465 api.cc:23175] topk API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.938114 74465 api.cc:23182] topk kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, int64"],"attribute":["Scalar","int","bool","bool"]}
I0603 16:33:14.938428 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.938442 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:14.938486 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.938496 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.938548 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.938588 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:14.938674 74465 api.cc:23175] topk API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.938686 74465 api.cc:23182] topk kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, int64"],"attribute":["Scalar","int","bool","bool"]}
I0603 16:33:14.938853 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.938865 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:14.938896 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.938903 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.938941 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.938947 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
[2024/06/03 16:33:14] ppcls INFO: [Train][Epoch 1/1][Iter: 6/10]lr(PiecewiseDecay): 0.10000000, top1: 0.00000, top5: 0.00893, CELoss: 10.75186, loss: 10.75186, batch_cost: 0.18853s, reader_cost: 0.00011, ips: 169.73643 samples/s, eta: 0:00:00
I0603 16:33:14.939888 74465 dygraph_api.cc:1733] reshape API kernel key: [XPU, NCHW, int64]
I0603 16:33:14.939906 74465 dygraph_api.cc:1740] reshape kernel: {"input":["XPU, NCHW, int64"],"output":["XPU, NCHW, int64","XPU, NCHW, int64"],"attribute":["IntArray"]}
I0603 16:33:14.939921 74465 dygraph_api.cc:1757] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.940095 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.940107 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.940263 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.940274 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.940287 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.940294 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.940582 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.940593 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.940773 74465 api.cc:31935] pool2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.940786 74465 api.cc:31942] pool2d kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["IntArray","vector<int>","vector<int>","bool","bool","string","string","bool","bool","string"]}
I0603 16:33:14.940886 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.940896 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.941017 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.941026 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.941040 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.941044 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.943274 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.943285 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.943374 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.943408 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.943536 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.943545 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.943558 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.943564 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.943677 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.943687 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.943770 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.943789 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.943915 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.943925 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.943938 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.943943 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.944238 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.944248 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.944366 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.944375 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.944388 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.944393 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.944630 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.944643 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.944700 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.944710 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.944891 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.944902 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.945039 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.945048 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.945060 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.945066 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.945165 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.945175 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.945255 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.945263 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.945394 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.945405 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.945416 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.945421 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.945530 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.945539 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.945616 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.945624 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.945742 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.945752 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.945765 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.945770 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.946076 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.946086 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.946141 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.946151 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.946311 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.946321 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.946458 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.946467 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.946480 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.946485 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.946593 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.946602 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.946678 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.946686 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.946799 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.946817 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.946830 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.946835 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.946943 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.946954 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.947031 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.947041 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.947154 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.947163 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.947175 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.947180 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.947418 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.947428 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.947479 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.947489 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.947669 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.947678 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.947892 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.947902 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.947914 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.947919 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.948081 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.948091 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.948195 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.948204 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.948361 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.948371 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.948383 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.948388 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.948467 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.948477 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.948535 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.948544 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.948621 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.948629 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.948642 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.948648 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.948818 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.948827 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.949028 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.949038 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.949050 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.949057 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.949201 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.949211 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.949263 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.949273 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.949378 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.949386 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.949541 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.949550 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.949563 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.949568 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.949657 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.949666 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.949726 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.949735 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.949815 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.949826 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.949841 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.949846 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.949925 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.949935 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.949995 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.950004 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.950079 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.950088 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.950100 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.950105 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.950239 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.950248 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.950292 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.950301 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.950397 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.950405 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.950551 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.950559 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.950572 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.950577 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.950652 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.950660 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.950716 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.950724 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.950795 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.950804 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.950820 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.950826 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.950902 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.950911 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.950968 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.950975 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.951045 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.951052 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.951064 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.951071 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.951202 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.951211 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.951253 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.951262 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.951362 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.951371 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.951532 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.951541 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.951555 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.951560 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.951644 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.951653 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.951711 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.951720 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.951793 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.951802 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.951819 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.951824 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.951903 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.951912 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.951970 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.951978 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.952049 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.952059 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.952069 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.952075 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.952214 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.952222 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.952266 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.952275 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.952373 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.952380 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.952535 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.952544 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.952556 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.952561 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.952662 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.952670 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.952742 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.952750 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.952865 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.952873 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.952885 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.952891 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.952965 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.952973 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.953023 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.953032 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.953106 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.953115 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.953127 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.953132 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.953243 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.953251 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.953404 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.953413 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.953425 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.953430 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.953522 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.953532 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.953583 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.953593 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.953667 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.953676 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.953779 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.953788 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.953800 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.953810 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.953886 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.953893 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.953940 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.953948 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.954025 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.954033 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.954044 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.954051 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.954128 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.954136 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.954185 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.954195 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.954264 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.954273 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.954284 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.954290 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.954384 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.954392 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.954435 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.954445 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.954516 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.954524 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.954633 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.954643 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.954653 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.954658 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.954737 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.954746 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.954797 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.954811 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.954892 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.954901 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.954912 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.954917 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.954995 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.955004 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.955055 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.955063 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.955138 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.955147 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.955159 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.955164 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.955257 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.955266 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.955310 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.955319 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.955392 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.955400 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.955524 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.955533 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.955545 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.955550 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.955627 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.955633 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.955683 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.955689 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.955763 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.955772 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.955785 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.955790 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.955886 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.955897 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.955945 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.955953 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.956024 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.956032 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.956044 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.956049 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.956140 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.956148 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.956192 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.956200 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.956269 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.956277 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.956384 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.956393 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.956405 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.956410 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.956486 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.956494 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.956545 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.956554 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.956627 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.956636 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.956647 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.956652 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.956730 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.956738 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.956789 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.956797 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.956871 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.956880 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.956892 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.956897 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.956985 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.956995 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.957036 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.957044 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.957115 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.957123 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.957228 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.957237 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.957247 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.957253 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.957330 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.957338 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.957392 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.957401 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.957474 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.957484 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.957495 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.957500 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.957578 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.957587 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.957636 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.957645 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.957715 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.957722 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.957736 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.957741 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.957834 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.957841 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.957883 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.957891 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.957962 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.957969 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.958073 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.958082 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.958094 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.958099 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.958175 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.958184 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.958240 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.958249 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.958317 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.958325 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.958336 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.958343 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.958417 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.958425 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.958473 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.958482 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.958561 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.958570 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.958581 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.958586 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.958673 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.958681 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.958819 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.958828 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.958840 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.958845 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.958917 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.958925 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.958972 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.958981 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.959044 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.959053 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.959152 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.959161 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.959172 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.959178 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.959255 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.959264 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.959313 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.959321 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.959394 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.959403 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.959415 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.959420 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.959496 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.959504 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.959554 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.959563 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.959640 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.959647 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.959659 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.959664 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.959736 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.959745 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.959795 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.959808 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.959870 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.959879 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.959982 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.959991 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.960003 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.960008 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.960084 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.960093 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.960145 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.960153 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.960229 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.960237 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.960249 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.960254 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.960330 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.960340 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.960390 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.960399 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:14.960466 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.960474 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:14.960486 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.960492 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.960557 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.960566 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.960606 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.960615 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:14.960754 74465 api.cc:31935] pool2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.960765 74465 api.cc:31942] pool2d kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["IntArray","vector<int>","vector<int>","bool","bool","string","string","bool","bool","string"]}
I0603 16:33:14.960841 74465 dygraph_api.cc:267] flatten API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.960853 74465 dygraph_api.cc:274] flatten kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["int","int"]}
I0603 16:33:14.960861 74465 dygraph_api.cc:292] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:14.960898 74465 api.cc:30593] matmul API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.960907 74465 api.cc:30600] matmul kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["bool","bool"]}
I0603 16:33:14.960974 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.960984 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:14.961086 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), int64]
I0603 16:33:14.961097 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, int64"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:14.961128 74465 api.cc:31621] not_equal API kernel key: [XPU, NCHW, int64]
I0603 16:33:14.961138 74465 api.cc:31628] not_equal kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, bool"],"attribute":[]}
I0603 16:33:14.961189 74465 api.cc:26250] cast API kernel key: [XPU, NCHW, bool]
I0603 16:33:14.961198 74465 api.cc:26257] cast kernel: {"input":["XPU, NCHW, bool"],"output":["XPU, NCHW, Undefined"],"attribute":["DataType"]}
I0603 16:33:14.961236 74465 api.cc:31270] multiply API kernel key: [XPU, NCHW, int64]
I0603 16:33:14.961246 74465 api.cc:31277] multiply kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, int64"],"attribute":[]}
I0603 16:33:14.961308 74465 api.cc:5746] cross_entropy_with_softmax API kernel key: [XPU, NCHW, float32]
I0603 16:33:14.961318 74465 api.cc:5753] cross_entropy_with_softmax kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","bool","bool","int","int"]}
I0603 16:33:14.961387 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), int64]
I0603 16:33:14.961396 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, int64"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:14.961419 74465 api.cc:27750] equal API kernel key: [XPU, NCHW, int64]
I0603 16:33:14.961429 74465 api.cc:27757] equal kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, bool"],"attribute":[]}
I0603 16:33:14.961467 74465 api.cc:3463] bitwise_not API kernel key: [XPU, NCHW, bool]
I0603 16:33:14.961477 74465 api.cc:3470] bitwise_not kernel: {"input":["KPS, NCHW, bool"],"output":["KPS, NCHW, bool"],"attribute":[]}
I0603 16:33:14.961531 74465 api.cc:26250] cast API kernel key: [XPU, NCHW, bool]
I0603 16:33:14.961539 74465 api.cc:26257] cast kernel: {"input":["XPU, NCHW, bool"],"output":["XPU, NCHW, Undefined"],"attribute":["DataType"]}
I0603 16:33:14.961578 74465 api.cc:26250] cast API kernel key: [XPU, NCHW, bool]
I0603 16:33:14.961586 74465 api.cc:26257] cast kernel: {"input":["XPU, NCHW, bool"],"output":["XPU, NCHW, Undefined"],"attribute":["DataType"]}
I0603 16:33:14.999903 74465 api.cc:34100] sum API kernel key: [XPU, NCHW, int64]
I0603 16:33:14.999914 74465 api.cc:34107] sum kernel: {"input":["XPU, NCHW, int64"],"output":["XPU, NCHW, Undefined"],"attribute":["IntArray","DataType","bool"]}
I0603 16:33:14.999974 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), int64]
I0603 16:33:14.999989 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, int64"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:15.000010 74465 api.cc:29726] greater_than API kernel key: [XPU, NCHW, int64]
I0603 16:33:15.000017 74465 api.cc:29733] greater_than kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, bool"],"attribute":[]}
I0603 16:33:15.000176 74465 api.cc:14667] mean_all API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.000185 74465 api.cc:14674] mean_all kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.000227 74465 api.cc:30971] mean API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.000236 74465 api.cc:30978] mean kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["IntArray","bool"]}
I0603 16:33:15.000279 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.000286 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:15.000669 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:15.000680 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:15.000921 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.000928 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:15.016386 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.016412 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:15.017771 74465 api.cc:15382] merged_momentum_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.017783 74465 api.cc:15389] merged_momentum kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["float","bool","vector<string>","vector<float>","bool","float"]}
I0603 16:33:15.125589 74465 api.cc:23175] topk API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.125633 74465 api.cc:23182] topk kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, int64"],"attribute":["Scalar","int","bool","bool"]}
I0603 16:33:15.125938 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.125954 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:15.125996 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.126005 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.126052 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.126061 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:15.126155 74465 api.cc:23175] topk API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.126165 74465 api.cc:23182] topk kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, int64"],"attribute":["Scalar","int","bool","bool"]}
I0603 16:33:15.126323 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.126334 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:15.126365 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.126374 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.126410 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.126418 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
[2024/06/03 16:33:15] ppcls INFO: [Train][Epoch 1/1][Iter: 7/10]lr(PiecewiseDecay): 0.10000000, top1: 0.00000, top5: 0.00781, CELoss: 10.66695, loss: 10.66695, batch_cost: 0.18808s, reader_cost: 0.00012, ips: 170.14339 samples/s, eta: 0:00:00
I0603 16:33:15.127372 74465 dygraph_api.cc:1733] reshape API kernel key: [XPU, NCHW, int64]
I0603 16:33:15.127393 74465 dygraph_api.cc:1740] reshape kernel: {"input":["XPU, NCHW, int64"],"output":["XPU, NCHW, int64","XPU, NCHW, int64"],"attribute":["IntArray"]}
I0603 16:33:15.127403 74465 dygraph_api.cc:1757] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.127581 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.127594 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.127750 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.127763 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.127774 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.127779 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.128088 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.128103 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.128288 74465 api.cc:31935] pool2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.128299 74465 api.cc:31942] pool2d kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["IntArray","vector<int>","vector<int>","bool","bool","string","string","bool","bool","string"]}
I0603 16:33:15.128391 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.128401 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.128523 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.128533 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.128544 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.128548 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.128655 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.128666 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.128742 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.128751 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.128878 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.128890 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.128901 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.128906 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.129007 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.129016 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.129094 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.129103 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.129211 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.129220 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.129232 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.129236 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.129500 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.129510 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.129624 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.129637 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.129647 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.129652 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.129896 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.129909 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.129964 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.129973 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.130123 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.130132 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.130265 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.130275 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.130286 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.130291 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.130395 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.130404 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.130484 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.130493 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.130604 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.130613 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.130625 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.130630 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.130730 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.130740 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.130857 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.130869 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.130980 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.130990 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.130999 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.131004 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.131235 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.131245 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.131294 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.131302 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.131454 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.131464 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.131593 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.131603 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.131613 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.131618 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.131722 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.131731 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.131803 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.131821 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.131927 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.131935 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.131945 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.131949 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.132051 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.132061 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.132131 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.132140 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.132239 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.132248 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.132258 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.132262 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.132483 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.132490 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.132536 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.132545 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.132695 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.132704 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.132910 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.132920 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.132930 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.132933 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.133086 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.133095 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.133194 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.133203 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.133355 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.133364 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.133375 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.133380 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.133459 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.133468 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.133525 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.133534 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.133608 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.133617 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.133627 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.133632 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.133786 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.133795 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.133994 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.134004 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.134016 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.134020 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.134163 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.134172 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.134222 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.134230 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.134335 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.134343 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.134501 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.134510 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.134521 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.134526 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.134603 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.134613 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.134671 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.134680 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.134755 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.134763 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.134774 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.134779 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.134866 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.134876 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.134933 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.134943 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.135013 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.135022 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.135032 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.135037 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.135174 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.135183 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.135228 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.135237 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.135335 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.135344 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.135499 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.135509 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.135519 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.135524 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.135600 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.135609 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.135665 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.135674 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.135744 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.135753 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.135763 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.135768 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.135864 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.135874 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.135933 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.135942 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.136014 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.136023 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.136034 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.136039 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.136169 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.136178 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.136224 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.136232 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.136327 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.136336 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.136487 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.136494 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.136505 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.136510 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.136590 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.136598 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.136655 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.136664 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.136736 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.136744 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.136755 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.136760 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.136844 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.136853 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.136910 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.136919 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.136986 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.136996 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.137006 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.137012 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.137144 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.137153 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.137195 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.137204 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.137300 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.137310 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.137459 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.137468 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.137480 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.137483 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.137581 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.137589 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.137660 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.137668 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.137766 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.137774 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.137786 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.137790 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.137871 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.137881 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.137928 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.137938 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.138007 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.138015 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.138026 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.138031 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.138136 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.138145 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.138289 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.138298 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.138309 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.138314 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.138404 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.138413 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.138458 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.138466 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.138537 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.138546 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.138657 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.138665 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.138676 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.138680 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.138758 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.138767 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.138824 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.138833 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.138909 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.138918 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.138929 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.138933 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.139019 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.139027 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.139081 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.139089 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.139163 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.139173 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.139183 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.139187 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.139281 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.139288 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.139333 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.139341 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.139415 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.139423 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.139532 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.139541 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.139551 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.139556 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.139636 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.139644 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.139696 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.139704 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.139779 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.139788 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.139798 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.139803 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.139951 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.139961 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.140010 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.140019 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.140096 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.140105 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.140115 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.140120 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.140219 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.140228 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.140273 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.140282 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.140353 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.140362 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.140475 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.140483 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.140494 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.140498 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.140576 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.140584 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.140636 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.140645 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.140724 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.140733 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.140743 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.140748 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.140841 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.140852 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.140905 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.140914 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.140987 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.140995 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.141006 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.141011 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.141104 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.141113 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.141156 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.141165 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.141237 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.141244 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.141357 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.141366 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.141376 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.141381 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.141458 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.141465 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.141515 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.141525 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.141597 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.141605 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.141616 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.141620 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.141695 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.141703 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.141753 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.141762 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.141856 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.141866 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.141876 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.141881 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.141975 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.141984 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.142030 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.142040 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.142112 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.142119 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.142232 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.142241 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.142251 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.142256 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.142335 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.142344 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.142395 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.142402 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.142472 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.142479 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.142488 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.142493 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.142563 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.142571 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.142617 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.142624 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.142690 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.142699 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.142707 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.142711 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.142796 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.142803 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.142853 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.142861 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.142923 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.142931 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.143028 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.143034 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.143044 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.143049 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.143116 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.143124 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.143175 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.143183 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.143249 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.143256 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.143265 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.143270 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.143333 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.143342 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.143383 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.143391 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.143457 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.143464 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.143474 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.143478 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.143555 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.143563 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.143676 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.143684 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.143693 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.143698 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.143761 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.143769 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.143817 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.143826 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.143882 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.143890 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.143981 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.143990 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.143998 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.144003 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.144069 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.144078 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.144119 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.144126 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.144188 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.144196 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.144205 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.144209 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.144273 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.144281 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.144323 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.144330 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.144392 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.144398 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.144408 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.144413 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.144472 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.144480 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.144520 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.144528 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.144580 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.144587 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.144677 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.144685 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.144694 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.144699 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.144764 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.144773 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.144824 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.144836 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.144902 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.144910 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.144920 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.144924 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.144992 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.145000 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.145044 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.145051 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.145110 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.145118 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.145128 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.145131 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.145187 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.145195 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.145231 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.145237 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.145362 74465 api.cc:31935] pool2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.145372 74465 api.cc:31942] pool2d kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["IntArray","vector<int>","vector<int>","bool","bool","string","string","bool","bool","string"]}
I0603 16:33:15.145438 74465 dygraph_api.cc:267] flatten API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.145449 74465 dygraph_api.cc:274] flatten kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["int","int"]}
I0603 16:33:15.145455 74465 dygraph_api.cc:292] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.145490 74465 api.cc:30593] matmul API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.145498 74465 api.cc:30600] matmul kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["bool","bool"]}
I0603 16:33:15.145560 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.145568 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.145661 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), int64]
I0603 16:33:15.145671 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, int64"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:15.145699 74465 api.cc:31621] not_equal API kernel key: [XPU, NCHW, int64]
I0603 16:33:15.145709 74465 api.cc:31628] not_equal kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, bool"],"attribute":[]}
I0603 16:33:15.145753 74465 api.cc:26250] cast API kernel key: [XPU, NCHW, bool]
I0603 16:33:15.145762 74465 api.cc:26257] cast kernel: {"input":["XPU, NCHW, bool"],"output":["XPU, NCHW, Undefined"],"attribute":["DataType"]}
I0603 16:33:15.145794 74465 api.cc:31270] multiply API kernel key: [XPU, NCHW, int64]
I0603 16:33:15.145812 74465 api.cc:31277] multiply kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, int64"],"attribute":[]}
I0603 16:33:15.145892 74465 api.cc:5746] cross_entropy_with_softmax API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.145903 74465 api.cc:5753] cross_entropy_with_softmax kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","bool","bool","int","int"]}
I0603 16:33:15.145972 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), int64]
I0603 16:33:15.145978 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, int64"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:15.146003 74465 api.cc:27750] equal API kernel key: [XPU, NCHW, int64]
I0603 16:33:15.146010 74465 api.cc:27757] equal kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, bool"],"attribute":[]}
I0603 16:33:15.146047 74465 api.cc:3463] bitwise_not API kernel key: [XPU, NCHW, bool]
I0603 16:33:15.146057 74465 api.cc:3470] bitwise_not kernel: {"input":["KPS, NCHW, bool"],"output":["KPS, NCHW, bool"],"attribute":[]}
I0603 16:33:15.146111 74465 api.cc:26250] cast API kernel key: [XPU, NCHW, bool]
I0603 16:33:15.146117 74465 api.cc:26257] cast kernel: {"input":["XPU, NCHW, bool"],"output":["XPU, NCHW, Undefined"],"attribute":["DataType"]}
I0603 16:33:15.146152 74465 api.cc:26250] cast API kernel key: [XPU, NCHW, bool]
I0603 16:33:15.146159 74465 api.cc:26257] cast kernel: {"input":["XPU, NCHW, bool"],"output":["XPU, NCHW, Undefined"],"attribute":["DataType"]}
I0603 16:33:15.146188 74465 api.cc:34100] sum API kernel key: [XPU, NCHW, int64]
I0603 16:33:15.146195 74465 api.cc:34107] sum kernel: {"input":["XPU, NCHW, int64"],"output":["XPU, NCHW, Undefined"],"attribute":["IntArray","DataType","bool"]}
I0603 16:33:15.146253 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), int64]
I0603 16:33:15.146261 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, int64"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:15.146283 74465 api.cc:29726] greater_than API kernel key: [XPU, NCHW, int64]
I0603 16:33:15.146289 74465 api.cc:29733] greater_than kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, bool"],"attribute":[]}
I0603 16:33:15.187742 74465 api.cc:14667] mean_all API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.187764 74465 api.cc:14674] mean_all kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.187834 74465 api.cc:30971] mean API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.187844 74465 api.cc:30978] mean kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["IntArray","bool"]}
I0603 16:33:15.187902 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.187911 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:15.188299 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:15.188311 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:15.188616 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.188625 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:15.206156 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.206185 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:15.207834 74465 api.cc:15382] merged_momentum_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.207849 74465 api.cc:15389] merged_momentum kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["float","bool","vector<string>","vector<float>","bool","float"]}
I0603 16:33:15.308545 74465 api.cc:23175] topk API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.308586 74465 api.cc:23182] topk kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, int64"],"attribute":["Scalar","int","bool","bool"]}
I0603 16:33:15.308868 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.308883 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:15.308923 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.308931 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.308976 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.308984 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:15.309072 74465 api.cc:23175] topk API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.309082 74465 api.cc:23182] topk kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, int64"],"attribute":["Scalar","int","bool","bool"]}
I0603 16:33:15.309229 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.309240 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:15.309270 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.309299 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.309334 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.309341 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
[2024/06/03 16:33:15] ppcls INFO: [Train][Epoch 1/1][Iter: 8/10]lr(PiecewiseDecay): 0.10000000, top1: 0.00000, top5: 0.00694, CELoss: 11.36280, loss: 11.36280, batch_cost: 0.18670s, reader_cost: 0.00012, ips: 171.39825 samples/s, eta: 0:00:00
I0603 16:33:15.310240 74465 dygraph_api.cc:1733] reshape API kernel key: [XPU, NCHW, int64]
I0603 16:33:15.310261 74465 dygraph_api.cc:1740] reshape kernel: {"input":["XPU, NCHW, int64"],"output":["XPU, NCHW, int64","XPU, NCHW, int64"],"attribute":["IntArray"]}
I0603 16:33:15.310272 74465 dygraph_api.cc:1757] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.310441 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.310453 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.310602 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.310613 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.310626 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.310629 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.310946 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.310959 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.311136 74465 api.cc:31935] pool2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.311146 74465 api.cc:31942] pool2d kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["IntArray","vector<int>","vector<int>","bool","bool","string","string","bool","bool","string"]}
I0603 16:33:15.311223 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.311231 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.311336 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.311345 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.311354 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.311358 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.311450 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.311458 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.311527 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.311534 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.311633 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.311641 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.311650 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.311654 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.311748 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.311755 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.311830 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.311838 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.311939 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.311946 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.311955 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.311960 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.312192 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.312201 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.312301 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.312309 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.312317 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.312322 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.312541 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.312549 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.312600 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.312608 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.312748 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.312757 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.312885 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.312894 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.312903 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.312907 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.312996 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.313004 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.313069 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.313077 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.313174 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.313180 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.313189 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.313194 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.313288 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.313295 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.313364 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.313370 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.313472 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.313479 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.313488 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.313493 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.313709 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.313715 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.313761 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.313769 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.314020 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.314028 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.314148 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.314157 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.314165 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.314170 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.314265 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.314272 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.314343 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.314352 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.314452 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.314460 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.314469 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.314473 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.314567 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.314575 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.314640 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.314647 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.314744 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.314751 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.314760 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.314764 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.314989 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.314997 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.315040 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.315048 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.315186 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.315194 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.315375 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.315383 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.315392 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.315397 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.315531 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.315539 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.315631 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.315639 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.315778 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.315785 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.315794 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.315799 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.315874 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.315882 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.315935 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.315943 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.316011 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.316018 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.316028 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.316033 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.316179 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.316187 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.316371 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.316380 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.316388 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.316392 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.316519 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.316526 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.316569 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.316577 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.316670 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.316677 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.316821 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.316829 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.316838 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.316843 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.316911 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.316919 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.316968 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.316977 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.317041 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.317049 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.317059 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.317063 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.317128 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.317137 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.317186 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.317193 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.317255 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.317261 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.317271 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.317276 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.317404 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.317412 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.317453 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.317461 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.317551 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.317559 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.317700 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.317708 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.317718 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.317723 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.317792 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.317800 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.317868 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.317878 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.317945 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.317953 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.317963 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.317967 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.318038 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.318046 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.318101 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.318109 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.318174 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.318181 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.318190 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.318195 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.318322 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.318331 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.318372 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.318380 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.318473 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.318481 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.318621 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.318629 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.318639 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.318645 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.318714 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.318722 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.318774 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.318781 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.318854 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.318862 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.318871 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.318876 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.318945 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.318953 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.319005 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.319012 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.319072 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.319080 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.319090 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.319094 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.319217 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.319226 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.319264 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.319272 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.319360 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.319367 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.319504 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.319511 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.319520 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.319525 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.319613 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.319622 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.319685 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.319692 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.319783 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.319792 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.319800 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.319809 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.319877 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.319885 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.319928 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.319936 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.320003 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.320010 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.320019 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.320024 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.320122 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.320129 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.320266 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.320272 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.320282 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.320287 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.320369 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.320376 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.320418 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.320426 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.320492 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.320499 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.320596 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.320603 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.320613 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.320618 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.320686 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.320694 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.320739 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.320746 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.320820 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.320828 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.320838 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.320842 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.320909 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.320917 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.320961 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.320967 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.321031 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.321039 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.321048 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.321053 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.321137 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.321146 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.321187 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.321195 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.321260 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.321267 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.321362 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.321370 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.321380 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.321384 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.321452 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.321460 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.321506 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.321512 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.321585 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.321593 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.321604 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.321607 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.321676 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.321684 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.321730 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.321738 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.321830 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.321839 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.321849 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.321854 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.321943 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.321951 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.321996 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.322005 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.322079 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.322086 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.322185 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.322193 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.322202 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.322207 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.322278 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.322284 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.322327 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.322335 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.322394 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.322402 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.322409 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.322413 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.322479 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.322485 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.322526 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.322533 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.322597 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.322603 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.322613 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.322616 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.322697 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.322705 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.322744 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.322751 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.322827 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.322836 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.322934 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.322942 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.322950 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.322954 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.323022 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.323029 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.323072 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.323079 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.323144 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.323151 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.323159 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.323163 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.323227 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.323235 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.323276 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.323282 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.323344 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.323351 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.323360 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.323364 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.323444 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.323451 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.323493 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.323499 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.323562 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.323570 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.323661 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.323668 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.323676 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.323680 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.323747 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.323755 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.323797 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.323804 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.323873 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.323880 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.323889 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.323892 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.323953 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.323961 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.324000 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.324007 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.324069 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.324075 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.324083 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.324087 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.324167 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.324173 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.324210 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.324218 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.324280 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.324286 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.324376 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.324383 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.324393 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.324396 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.324457 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.324465 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.324512 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.324518 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.324576 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.324584 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.324592 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.324595 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.324654 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.324661 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.324699 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.324707 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.324767 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.324774 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.324782 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.324785 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.324865 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.324873 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.324986 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.324993 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.325002 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.325006 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.325066 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.325073 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.325114 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.325121 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.325173 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.325181 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.325268 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.325274 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.325282 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.325286 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.325350 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.325357 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.325397 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.325403 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.325464 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.325470 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.325479 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.325481 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.325542 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.325549 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.325588 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.325595 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.325659 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.325665 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.325675 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.325677 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.325737 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.325744 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.325784 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.325791 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.325848 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.325857 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.325944 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.325953 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.325960 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.325964 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.326026 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.326033 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.326071 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.326078 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.326138 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.326144 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.326153 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.326156 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.326217 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.326225 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.326265 74465 api.cc:5199] conv2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.326272 74465 api.cc:5206] conv2d kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["vector<int>","vector<int>","string","vector<int>","int","string"]}
I0603 16:33:15.326329 74465 api.cc:26006] batch_norm API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.326336 74465 api.cc:26013] batch_norm kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","float","float","string","bool","bool"]}
I0603 16:33:15.326344 74465 api.cc:26048] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.326347 74465 api.cc:26052] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.326403 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.326411 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.326445 74465 api.cc:18238] relu API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.326452 74465 api.cc:18245] relu kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.326575 74465 api.cc:31935] pool2d API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.326584 74465 api.cc:31942] pool2d kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["IntArray","vector<int>","vector<int>","bool","bool","string","string","bool","bool","string"]}
I0603 16:33:15.326646 74465 dygraph_api.cc:267] flatten API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.326656 74465 dygraph_api.cc:274] flatten kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["int","int"]}
I0603 16:33:15.326663 74465 dygraph_api.cc:292] Perform View between Output and Input Tensor, share allocation and inplace version.
I0603 16:33:15.326694 74465 api.cc:30593] matmul API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.326702 74465 api.cc:30600] matmul kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["bool","bool"]}
I0603 16:33:15.326757 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.326764 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.326859 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), int64]
I0603 16:33:15.326870 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, int64"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:15.326896 74465 api.cc:31621] not_equal API kernel key: [XPU, NCHW, int64]
I0603 16:33:15.326903 74465 api.cc:31628] not_equal kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, bool"],"attribute":[]}
I0603 16:33:15.326946 74465 api.cc:26250] cast API kernel key: [XPU, NCHW, bool]
I0603 16:33:15.326953 74465 api.cc:26257] cast kernel: {"input":["XPU, NCHW, bool"],"output":["XPU, NCHW, Undefined"],"attribute":["DataType"]}
I0603 16:33:15.326983 74465 api.cc:31270] multiply API kernel key: [XPU, NCHW, int64]
I0603 16:33:15.326992 74465 api.cc:31277] multiply kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, int64"],"attribute":[]}
I0603 16:33:15.327046 74465 api.cc:5746] cross_entropy_with_softmax API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.327054 74465 api.cc:5753] cross_entropy_with_softmax kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["bool","bool","bool","int","int"]}
I0603 16:33:15.327116 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), int64]
I0603 16:33:15.327123 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, int64"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:15.327143 74465 api.cc:27750] equal API kernel key: [XPU, NCHW, int64]
I0603 16:33:15.327152 74465 api.cc:27757] equal kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, bool"],"attribute":[]}
I0603 16:33:15.327183 74465 api.cc:3463] bitwise_not API kernel key: [XPU, NCHW, bool]
I0603 16:33:15.327191 74465 api.cc:3470] bitwise_not kernel: {"input":["KPS, NCHW, bool"],"output":["KPS, NCHW, bool"],"attribute":[]}
I0603 16:33:15.327239 74465 api.cc:26250] cast API kernel key: [XPU, NCHW, bool]
I0603 16:33:15.327245 74465 api.cc:26257] cast kernel: {"input":["XPU, NCHW, bool"],"output":["XPU, NCHW, Undefined"],"attribute":["DataType"]}
I0603 16:33:15.327275 74465 api.cc:26250] cast API kernel key: [XPU, NCHW, bool]
I0603 16:33:15.327281 74465 api.cc:26257] cast kernel: {"input":["XPU, NCHW, bool"],"output":["XPU, NCHW, Undefined"],"attribute":["DataType"]}
I0603 16:33:15.327306 74465 api.cc:34100] sum API kernel key: [XPU, NCHW, int64]
I0603 16:33:15.327313 74465 api.cc:34107] sum kernel: {"input":["XPU, NCHW, int64"],"output":["XPU, NCHW, Undefined"],"attribute":["IntArray","DataType","bool"]}
I0603 16:33:15.327363 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), int64]
I0603 16:33:15.327370 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, int64"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:15.327389 74465 api.cc:29726] greater_than API kernel key: [XPU, NCHW, int64]
I0603 16:33:15.327394 74465 api.cc:29733] greater_than kernel: {"input":["XPU, NCHW, int64","XPU, NCHW, int64"],"output":["XPU, NCHW, bool"],"attribute":[]}
I0603 16:33:15.370721 74465 api.cc:14667] mean_all API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.370738 74465 api.cc:14674] mean_all kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":[]}
I0603 16:33:15.370795 74465 api.cc:30971] mean API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.370803 74465 api.cc:30978] mean kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["IntArray","bool"]}
I0603 16:33:15.370867 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.370874 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:15.371277 74465 api.cc:28638] full API kernel key: [XPU, Undefined(AnyLayout), float32]
I0603 16:33:15.371289 74465 api.cc:28645] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:15.371531 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.371538 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:15.388291 74465 api.cc:28756] full_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.388317 74465 api.cc:28763] full kernel: {"input":[],"output":["XPU, NCHW, float32"],"attribute":["IntArray","Scalar","DataType"]}
I0603 16:33:15.389786 74465 api.cc:15382] merged_momentum_ API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.389796 74465 api.cc:15389] merged_momentum kernel: {"input":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, float32","XPU, NCHW, float32"],"attribute":["float","bool","vector<string>","vector<float>","bool","float"]}
I0603 16:33:15.498616 74465 api.cc:23175] topk API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.498657 74465 api.cc:23182] topk kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, int64"],"attribute":["Scalar","int","bool","bool"]}
I0603 16:33:15.498967 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.498982 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:15.499024 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.499035 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.499082 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.499091 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:15.499181 74465 api.cc:23175] topk API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.499191 74465 api.cc:23182] topk kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32","XPU, NCHW, int64"],"attribute":["Scalar","int","bool","bool"]}
I0603 16:33:15.499351 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.499362 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
I0603 16:33:15.499394 74465 api.cc:25254] add API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.499402 74465 api.cc:25261] add kernel: {"input":["KPS, NCHW, float32","KPS, NCHW, float32"],"output":["KPS, NCHW, float32"],"attribute":[]}
I0603 16:33:15.499439 74465 api.cc:19119] scale API kernel key: [XPU, NCHW, float32]
I0603 16:33:15.499449 74465 api.cc:19126] scale kernel: {"input":["XPU, NCHW, float32"],"output":["XPU, NCHW, float32"],"attribute":["Scalar","float","bool"]}
[2024/06/03 16:33:15] ppcls INFO: [Train][Epoch 1/1][Iter: 9/10]lr(PiecewiseDecay): 0.10000000, top1: 0.00313, top5: 0.00937, CELoss: 11.40493, loss: 11.40493, batch_cost: 0.18733s, reader_cost: 0.00012, ips: 170.82067 samples/s, eta: 0:00:00
[2024/06/03 16:33:15] ppcls INFO: [Train][Epoch 1/1][Avg]top1: 0.00313, top5: 0.00937, CELoss: 11.40493, loss: 11.40493
[2024/06/03 16:33:15] ppcls INFO: Already save model in ./output/ResNet50/latest
